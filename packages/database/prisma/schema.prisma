// apps/web/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core curriculum structure
model Concept {
  id             String    @id @default(cuid())
  name           String    @unique
  description    String?
  difficulty     Int       @default(1) // 1-5 scale
  prerequisites  String[]  // Array of concept IDs
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  tasks          ConceptTask[]
  progress       Progress[]
  
  @@index([difficulty])
}

model Task {
  id            String    @id @default(cuid())
  title         String
  description   String
  prompt        String    @db.Text
  difficulty    Int       @default(1)

  // Curriculum relationships
  concepts      ConceptTask[]
  prerequisites String[]  // Task IDs that must be completed first

  // Code scaffolding
  scaffold      Json      // Record<string, string> - initial files
  solution      Json      // Record<string, string> - complete solution

  // Testing
  tests         Json      // Array of { id, code, label, successMsg, failureMsg }

  // Hints (three-tier system)
  hints         Json      // Array of { level: 1|2|3, text: string }

  // Enhanced educational content
  detailedDescription String?    @db.Text  // Rich, conversational description
  realWorldContext    String?    @db.Text  // Why this matters in real dev work
  alternativeSolutions Json?                // Array of alternative solution approaches

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  attempts      Attempt[]

  @@index([difficulty])
}

// Join table for many-to-many relationship between Concept and Task
model ConceptTask {
  concept    Concept  @relation(fields: [conceptId], references: [id], onDelete: Cascade)
  conceptId  String
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId     String

  @@id([conceptId, taskId])
  @@index([conceptId])
  @@index([taskId])
}

// Student progress tracking
model Progress {
  id            String    @id @default(cuid())
  userId        String    // From auth provider (Clerk, NextAuth, etc.)
  conceptId     String
  concept       Concept   @relation(fields: [conceptId], references: [id], onDelete: Cascade)
  
  mastery       Int       @default(800) // Elo-style score: 600-1800
  attempts      Int       @default(0)
  successes     Int       @default(0)
  lastAttemptAt DateTime?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([userId, conceptId])
  @@index([userId])
  @@index([conceptId])
}

// Individual task attempts
model Attempt {
  id            String    @id @default(cuid())
  userId        String
  taskId        String
  task          Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  code          Json      // Record<string, string> - submitted files
  passed        Boolean
  passedTests   String[]  // Test IDs that passed
  failedTests   String[]  // Test IDs that failed
  
  hintsUsed     Int       @default(0)
  maxHintLevel  Int       @default(0) // Highest hint level requested (1-3)
  timeSpentMs   Int?      // Optional: track time on task
  
  createdAt     DateTime  @default(now())
  
  @@index([userId])
  @@index([taskId])
  @@index([createdAt])
}

// Chat history for fine-tuning
model Dialog {
  id            String    @id @default(cuid())
  userId        String
  taskId        String?   // Optional: may be general questions
  
  role          String    // "user" | "assistant" | "system"
  content       String    @db.Text
  hintLevel     Int?      // If assistant message was a hint
  
  createdAt     DateTime  @default(now())
  
  @@index([userId])
  @@index([taskId])
  @@index([createdAt])
}

// Optional: User profiles (if not using external auth)
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([email])
}
// -------- Agent & Orchestration --------
model Agent {
  id            String   @id @default(cuid())
  name          String   @unique
  version       String
  systemPrompt  String
  tools         Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Conversation {
  id            String   @id @default(cuid())
  agentId       String?
  agentVersion  String?
  studentId     String
  courseId      String
  createdAt     DateTime @default(now())
  messages      Message[]
  @@index([studentId, courseId])
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  role           String   // system | user | assistant | tool | summary
  text           String   @db.Text
  tokens         Int?
  toolCalls      Json?
  language       String?
  createdAt      DateTime @default(now())
  feedback       Feedback?
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  @@index([conversationId])
}

// -------- Long-term memory & knowledge --------
model Memory {
  id         String   @id @default(cuid())
  studentId  String
  courseId   String
  text       String   @db.Text
  source     String
  lastUsedAt DateTime @default(now())
  embedding  Bytes?   // upgrade to pgvector later
  @@index([studentId, courseId])
}

model KnowledgeDoc {
  id        String   @id @default(cuid())
  courseId  String
  lessonId  String?
  uri       String?
  text      String   @db.Text
  meta      Json?
  embedding Bytes?   // upgrade to pgvector later
  @@index([courseId])
}

// -------- Feedback & evals --------
model Feedback {
  id         String   @id @default(cuid())
  messageId  String   @unique
  rating     Int      // -1 | 0 | 1
  tags       String[]
  comment    String?
  createdAt  DateTime @default(now())
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model EvalSample {
  id         String   @id @default(cuid())
  input      String   @db.Text
  golden     String   @db.Text
  rubricId   String?
  createdAt  DateTime @default(now())
}

model EvalResult {
  id          String   @id @default(cuid())
  agentId     String
  agentVer    String
  sampleId    String
  score       Float
  metrics     Json
  createdAt   DateTime @default(now())
}

// -------- Challenges Module --------
model Challenge {
  id           String   @id @default(cuid())
  level        Int
  slug         String   @unique
  title        String
  objective    String
  passCriteria String
  starter      Json     // { html?:string, css?:string, js?:string }
  tests        Json     // array of test definitions interpreted by /api/eval
  tags         String[]
  paramsSchema Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  solutions    ChallengeSolution[]
  hintTemplates ChallengeHintTemplate[]
}

model ChallengeSolution {
  id          String   @id @default(cuid())
  challengeId String
  label       String
  files       Json     // { html?:string, css?:string, js?:string }
  notes       String?
  createdAt   DateTime @default(now())
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}

model ChallengeHintTemplate {
  id          String   @id @default(cuid())
  challengeId String
  level       Int      // 1..3
  text        String
  createdAt   DateTime @default(now())
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}
