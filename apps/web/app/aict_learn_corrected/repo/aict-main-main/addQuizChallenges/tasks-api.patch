
*** Begin Patch
*** Add File: apps/web/app/api/tasks/route.ts
+import { NextResponse } from "next/server";
+import { promises as fs } from "fs";
+import path from "path";
+
+const SRC = process.env.TASKS_SOURCE || "local"; // local | db
+
+async function loadLocal(level?: number) {
+  const file = path.join(process.cwd(), "apps/web/data/tasks.levels.json");
+  const raw = await fs.readFile(file, "utf-8");
+  const all = JSON.parse(raw) as any[];
+  return typeof level === "number" ? all.filter(t => t.difficulty === level) : all;
+}
+
+async function loadDb(level?: number) {
+  const { PrismaClient } = await import("@prisma/client");
+  const prisma = new PrismaClient();
+  try {
+    const where = level ? { difficulty: level } : {};
+    return await prisma.task.findMany({ where, orderBy: { id: "asc" } });
+  } finally {
+    await prisma.$disconnect();
+  }
+}
+
+export async function GET(req: Request) {
+  const { searchParams } = new URL(req.url);
+  const levelParam = searchParams.get("level");
+  const level = levelParam ? parseInt(levelParam) : undefined;
+  const limit = parseInt(searchParams.get("limit") || "15");
+  const offset = parseInt(searchParams.get("offset") || "0");
+
+  const rows = SRC === "db" ? await loadDb(level) : await loadLocal(level);
+  const items = rows.slice(offset, offset + limit);
+  return NextResponse.json({ items, total: rows.length });
+}
+
*** End Patch
