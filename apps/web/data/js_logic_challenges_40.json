[
  {
    "id": "js-001",
    "title": "Sum Array",
    "description": "Return the sum of a numeric array.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Sum Array</title>\n</head>\n<body>\n  <h1>Sum Array</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction sumArray(arr) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.sumArray = sumArray;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Return the sum of a numeric array.",
        "type": "dom",
        "code": "const p=[],f=[]; try{ if(window.sumArray([1,2,3,4])===10) p.push('a1'); if(window.sumArray([])===0) p.push('a2'); if(window.sumArray([-2,2])===0) p.push('a3'); }catch(e){f.push('err');} return {passedIds:p, failedIds:f, passed:f.length===0 && p.length===3};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Use Array.prototype.reduce."
      },
      {
        "level": 2,
        "text": "Initialize accumulator to 0."
      },
      {
        "level": 3,
        "text": "Avoid floating point surprises by not coercing to strings."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Sum Array</title>\n</head>\n<body>\n  <h1>Sum Array</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function sumArray(arr){return arr.reduce((a,b)=>a+b,0);} window.sumArray=sumArray;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Sum Array</title>\n</head>\n<body>\n  <h1>Sum Array</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function sumArray(arr){let s=0; for(const n of arr) s+=n; return s;} window.sumArray=sumArray;"
        }
      }
    ]
  },
  {
    "id": "js-002",
    "title": "Factorial",
    "description": "Compute n! for n>=0.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Factorial</title>\n</head>\n<body>\n  <h1>Factorial</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction factorial(n) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.factorial = factorial;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Compute n! for n>=0.",
        "type": "dom",
        "code": "const p=[],f=[]; const fn=window.factorial; if(fn(0)===1)p.push('a1'); if(fn(5)===120)p.push('a2'); if(fn(10)===3628800)p.push('a3'); return {passedIds:p, failedIds:f, passed:p.length===3};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Iterative solutions avoid recursion limits."
      },
      {
        "level": 2,
        "text": "Base case: 0! = 1."
      },
      {
        "level": 3,
        "text": "Multiply 1..n."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Factorial</title>\n</head>\n<body>\n  <h1>Factorial</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function factorial(n){let x=1; for(let i=2;i<=n;i++) x*=i; return x;} window.factorial=factorial;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Factorial</title>\n</head>\n<body>\n  <h1>Factorial</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function factorial(n){ if(n===0) return 1; return n*factorial(n-1);} window.factorial=factorial;"
        }
      }
    ]
  },
  {
    "id": "js-003",
    "title": "Palindrome (alphanumeric)",
    "description": "Return true if a string reads the same backward, ignoring non-alphanumerics and case.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 2,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Palindrome (alphanumeric)</title>\n</head>\n<body>\n  <h1>Palindrome (alphanumeric)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction isPalindrome(s) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.isPalindrome = isPalindrome;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Return true if a string reads the same backward, ignoring non-alphanumerics and case.",
        "type": "dom",
        "code": "const p=[],f=[]; const fn=window.isPalindrome; if(fn('Race car!'))p.push('a1'); if(!fn('hello'))p.push('a2'); if(fn('A man, a plan, a canal: Panama'))p.push('a3'); return {passedIds:p, failedIds:f, passed:p.length===3};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Normalize the string: lowercase and strip non-alphanumerics."
      },
      {
        "level": 2,
        "text": "Compare to its reverse."
      },
      {
        "level": 3,
        "text": "Two-pointer scan avoids building a full reverse."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Palindrome (alphanumeric)</title>\n</head>\n<body>\n  <h1>Palindrome (alphanumeric)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function isPalindrome(s){ s=s.toLowerCase().replace(/[^a-z0-9]/g,''); return s===s.split('').reverse().join(''); } window.isPalindrome=isPalindrome;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Palindrome (alphanumeric)</title>\n</head>\n<body>\n  <h1>Palindrome (alphanumeric)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function isPalindrome(s){ s=s.toLowerCase(); let i=0,j=s.length-1; const isA=(c)=>/[a-z0-9]/.test(c); while(i<j){ while(i<j&&!isA(s[i])) i++; while(i<j&&!isA(s[j])) j--; if(s[i++]!==s[j--]) return false; } return true;} window.isPalindrome=isPalindrome;"
        }
      }
    ]
  },
  {
    "id": "js-004",
    "title": "FizzBuzz",
    "description": "Return an array 1..n with 'Fizz','Buzz','FizzBuzz' substitutions.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>FizzBuzz</title>\n</head>\n<body>\n  <h1>FizzBuzz</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction fizzbuzz(n) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.fizzbuzz = fizzbuzz;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Return an array 1..n with 'Fizz','Buzz','FizzBuzz' substitutions.",
        "type": "dom",
        "code": "const a=window.fizzbuzz(20); const p=[],f=[]; if(a[2]==='Fizz')p.push('a1'); if(a[4]==='Buzz')p.push('a2'); if(a[14]==='FizzBuzz')p.push('a3'); return {passedIds:p, failedIds:f, passed:p.length===3};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Use modulo 3 and 5."
      },
      {
        "level": 2,
        "text": "Join strings when both match."
      },
      {
        "level": 3,
        "text": "Default to the number."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>FizzBuzz</title>\n</head>\n<body>\n  <h1>FizzBuzz</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function fizzbuzz(n){const out=[]; for(let i=1;i<=n;i++){let s=''; if(i%3===0)s+='Fizz'; if(i%5===0)s+='Buzz'; out.push(s||i);} return out;} window.fizzbuzz=fizzbuzz;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>FizzBuzz</title>\n</head>\n<body>\n  <h1>FizzBuzz</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function fizzbuzz(n){return Array.from({length:n},(_,k)=>{const i=k+1; return i%15===0?'FizzBuzz':i%3===0?'Fizz':i%5===0?'Buzz':i;});} window.fizzbuzz=fizzbuzz;"
        }
      }
    ]
  },
  {
    "id": "js-005",
    "title": "Reverse Words",
    "description": "Reverse the order of words in a sentence.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Reverse Words</title>\n</head>\n<body>\n  <h1>Reverse Words</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction reverseWords(s) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.reverseWords = reverseWords;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Reverse the order of words in a sentence.",
        "type": "dom",
        "code": "const p=[],f=[]; const fn=window.reverseWords; if(fn('a b c')==='c b a')p.push('a1'); if(fn('hello world')==='world hello')p.push('a2'); return {passedIds:p, failedIds:f, passed:p.length===2};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Split on whitespace."
      },
      {
        "level": 2,
        "text": "Reverse, then join."
      },
      {
        "level": 3,
        "text": "Preserve single spaces is fine for this task."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Reverse Words</title>\n</head>\n<body>\n  <h1>Reverse Words</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function reverseWords(s){return s.trim().split(/\\s+/).reverse().join(' ');} window.reverseWords=reverseWords;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Reverse Words</title>\n</head>\n<body>\n  <h1>Reverse Words</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function reverseWords(s){const arr=s.trim().split(/\\s+/); let i=0,j=arr.length-1; while(i<j){ [arr[i],arr[j]]=[arr[j],arr[i]]; i++; j--; } return arr.join(' ');} window.reverseWords=reverseWords;"
        }
      }
    ]
  },
  {
    "id": "js-006",
    "title": "Unique Elements",
    "description": "Return a new array containing unique elements in original order.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Unique Elements</title>\n</head>\n<body>\n  <h1>Unique Elements</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction unique(arr) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.unique = unique;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Return a new array containing unique elements in original order.",
        "type": "dom",
        "code": "const out=window.unique([1,1,2,3,3]); const p=[],f=[]; if(JSON.stringify(out)===JSON.stringify([1,2,3]))p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Use Set to track seen."
      },
      {
        "level": 2,
        "text": "Only push if not seen."
      },
      {
        "level": 3,
        "text": "Maintain order."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Unique Elements</title>\n</head>\n<body>\n  <h1>Unique Elements</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function unique(arr){const seen=new Set(),res=[]; for(const x of arr){ if(!seen.has(x)){ seen.add(x); res.push(x); } } return res;} window.unique=unique;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Unique Elements</title>\n</head>\n<body>\n  <h1>Unique Elements</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function unique(arr){return [...new Set(arr)];} window.unique=unique;"
        }
      }
    ]
  },
  {
    "id": "js-007",
    "title": "Count Vowels",
    "description": "Count vowels (a, e, i, o, u) case-insensitive.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Count Vowels</title>\n</head>\n<body>\n  <h1>Count Vowels</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction countVowels(s) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.countVowels = countVowels;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Count vowels (a, e, i, o, u) case-insensitive.",
        "type": "dom",
        "code": "const fn=window.countVowels; const p=[],f=[]; if(fn('Hello')===2)p.push('a1'); if(fn('AEIOU')===5)p.push('a2'); return {passedIds:p, failedIds:f, passed:p.length===2};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Lowercase the string."
      },
      {
        "level": 2,
        "text": "Check membership in a vowel set."
      },
      {
        "level": 3,
        "text": "Regex works too."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Count Vowels</title>\n</head>\n<body>\n  <h1>Count Vowels</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function countVowels(s){s=s.toLowerCase(); let c=0; for(const ch of s) if('aeiou'.includes(ch)) c++; return c;} window.countVowels=countVowels;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Count Vowels</title>\n</head>\n<body>\n  <h1>Count Vowels</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function countVowels(s){return (s.match(/[aeiou]/gi)||[]).length;} window.countVowels=countVowels;"
        }
      }
    ]
  },
  {
    "id": "js-008",
    "title": "Anagram Check",
    "description": "Return true if two strings are anagrams (ignore case, spaces).",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Anagram Check</title>\n</head>\n<body>\n  <h1>Anagram Check</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction isAnagram(a,b) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.isAnagram = isAnagram;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Return true if two strings are anagrams (ignore case, spaces).",
        "type": "dom",
        "code": "const fn=window.isAnagram; const p=[],f=[]; if(fn('listen','silent'))p.push('a1'); if(fn('rail safety','fairy tales'))p.push('a2'); if(!fn('rat','car'))p.push('a3'); return {passedIds:p, failedIds:f, passed:p.length===3};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Normalize: lowercase, strip spaces."
      },
      {
        "level": 2,
        "text": "Sort and compare."
      },
      {
        "level": 3,
        "text": "Or use a frequency map."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Anagram Check</title>\n</head>\n<body>\n  <h1>Anagram Check</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function isAnagram(a,b){ const norm=s=>s.toLowerCase().replace(/\\s+/g,'').split('').sort().join(''); return norm(a)===norm(b);} window.isAnagram=isAnagram;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Anagram Check</title>\n</head>\n<body>\n  <h1>Anagram Check</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function isAnagram(a,b){ a=a.toLowerCase().replace(/\\s+/g,''); b=b.toLowerCase().replace(/\\s+/g,''); const m=new Map(); for(const c of a) m.set(c,(m.get(c)||0)+1); for(const c of b){ if(!m.has(c)) return false; const t=m.get(c)-1; if(t) m.set(c,t); else m.delete(c);} return m.size===0;} window.isAnagram=isAnagram;"
        }
      }
    ]
  },
  {
    "id": "js-009",
    "title": "Two Sum Indices",
    "description": "Return indices [i,j] with nums[i]+nums[j]==target (exactly one solution).",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Two Sum Indices</title>\n</head>\n<body>\n  <h1>Two Sum Indices</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction twoSum(nums,target) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.twoSum = twoSum;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Return indices [i,j] with nums[i]+nums[j]==target (exactly one solution).",
        "type": "dom",
        "code": "const out=window.twoSum([2,7,11,15],9); const p=[],f=[]; if(Array.isArray(out)&&out[0]===0&&out[1]===1)p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Hash map from value to index."
      },
      {
        "level": 2,
        "text": "Lookup complement each step."
      },
      {
        "level": 3,
        "text": "Return indices once found."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Two Sum Indices</title>\n</head>\n<body>\n  <h1>Two Sum Indices</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function twoSum(nums,target){const map=new Map(); for(let i=0;i<nums.length;i++){const c=target-nums[i]; if(map.has(c)) return [map.get(c), i]; map.set(nums[i], i);} } window.twoSum=twoSum;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Two Sum Indices</title>\n</head>\n<body>\n  <h1>Two Sum Indices</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function twoSum(nums,target){for(let i=0;i<nums.length;i++){for(let j=i+1;j<nums.length;j++){if(nums[i]+nums[j]===target) return [i,j];}}} window.twoSum=twoSum;"
        }
      }
    ]
  },
  {
    "id": "js-010",
    "title": "Flatten One Level",
    "description": "Flatten a 1-level nested array.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Flatten One Level</title>\n</head>\n<body>\n  <h1>Flatten One Level</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction flatten1(arr) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.flatten1 = flatten1;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Flatten a 1-level nested array.",
        "type": "dom",
        "code": "const out=window.flatten1([1,[2,3],[4]]); const p=[],f=[]; if(JSON.stringify(out)===JSON.stringify([1,2,3,4]))p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Use flat(1)."
      },
      {
        "level": 2,
        "text": "Or loop and spread inner arrays."
      },
      {
        "level": 3,
        "text": "Don't deep-flatten."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Flatten One Level</title>\n</head>\n<body>\n  <h1>Flatten One Level</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function flatten1(arr){return arr.flat(1);} window.flatten1=flatten1;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Flatten One Level</title>\n</head>\n<body>\n  <h1>Flatten One Level</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function flatten1(arr){const res=[]; for(const x of arr){ if(Array.isArray(x)) res.push(...x); else res.push(x);} return res;} window.flatten1=flatten1;"
        }
      }
    ]
  },
  {
    "id": "js-011",
    "title": "Clamp Number",
    "description": "Clamp n into [min,max].",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Clamp Number</title>\n</head>\n<body>\n  <h1>Clamp Number</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction clamp(n, min, max) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.clamp = clamp;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Clamp n into [min,max].",
        "type": "dom",
        "code": "const fn=window.clamp; const p=[],f=[]; if(fn(5,0,10)===5)p.push('a1'); if(fn(-3,0,10)===0)push='x'; if(fn(22,0,10)===10)p.push('a3'); return {passedIds:p, failedIds:f, passed:p.length===2 || p.length===3};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Use Math.min/Math.max."
      },
      {
        "level": 2,
        "text": "Order matters: max(min,n)."
      },
      {
        "level": 3,
        "text": "Return the result."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Clamp Number</title>\n</head>\n<body>\n  <h1>Clamp Number</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function clamp(n,min,max){return Math.min(max, Math.max(min,n));} window.clamp=clamp;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Clamp Number</title>\n</head>\n<body>\n  <h1>Clamp Number</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function clamp(n,min,max){ if(n<min) return min; if(n>max) return max; return n;} window.clamp=clamp;"
        }
      }
    ]
  },
  {
    "id": "js-012",
    "title": "Chunk Array",
    "description": "Split an array into chunks of size k (last chunk may be smaller).",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Chunk Array</title>\n</head>\n<body>\n  <h1>Chunk Array</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction chunk(arr,k) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.chunk = chunk;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Split an array into chunks of size k (last chunk may be smaller).",
        "type": "dom",
        "code": "const out=window.chunk([1,2,3,4,5],2); const p=[],f=[]; if(JSON.stringify(out)===JSON.stringify([[1,2],[3,4],[5]]))p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Loop by step k."
      },
      {
        "level": 2,
        "text": "Use slice(i,i+k)."
      },
      {
        "level": 3,
        "text": "Collect into result."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Chunk Array</title>\n</head>\n<body>\n  <h1>Chunk Array</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function chunk(arr,k){const res=[]; for(let i=0;i<arr.length;i+=k){res.push(arr.slice(i,i+k));} return res;} window.chunk=chunk;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Chunk Array</title>\n</head>\n<body>\n  <h1>Chunk Array</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function chunk(arr,k){const res=[], tmp=[]; for(const x of arr){ tmp.push(x); if(tmp.length===k){res.push(tmp.slice()); tmp.length=0;} } if(tmp.length) res.push(tmp); return res;} window.chunk=chunk;"
        }
      }
    ]
  },
  {
    "id": "js-013",
    "title": "Shallow Equal Objects",
    "description": "Return true if two plain objects have same keys and values (shallow).",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Shallow Equal Objects</title>\n</head>\n<body>\n  <h1>Shallow Equal Objects</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction shallowEqual(a,b) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.shallowEqual = shallowEqual;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Return true if two plain objects have same keys and values (shallow).",
        "type": "dom",
        "code": "const fn=window.shallowEqual; const p=[],f=[]; if(fn({x:1,y:2},{x:1,y:2}))p.push('a1'); if(!fn({x:1},{x:2}))p.push('a2'); return {passedIds:p, failedIds:f, passed:p.length===2};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Compare keys length."
      },
      {
        "level": 2,
        "text": "Check every key equality."
      },
      {
        "level": 3,
        "text": "Ignore prototype differences."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Shallow Equal Objects</title>\n</head>\n<body>\n  <h1>Shallow Equal Objects</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function shallowEqual(a,b){const ka=Object.keys(a), kb=Object.keys(b); if(ka.length!==kb.length) return false; for(const k of ka){ if(a[k]!==b[k]) return false;} return true;} window.shallowEqual=shallowEqual;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Shallow Equal Objects</title>\n</head>\n<body>\n  <h1>Shallow Equal Objects</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function shallowEqual(a,b){for(const k in a){ if(!(k in b)||a[k]!==b[k]) return false;} for(const k in b){ if(!(k in a)) return false;} return true;} window.shallowEqual=shallowEqual;"
        }
      }
    ]
  },
  {
    "id": "js-014",
    "title": "Rotate Array Right",
    "description": "Rotate array right by k steps (non-destructive).",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Rotate Array Right</title>\n</head>\n<body>\n  <h1>Rotate Array Right</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction rotateRight(arr,k) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.rotateRight = rotateRight;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Rotate array right by k steps (non-destructive).",
        "type": "dom",
        "code": "const out=window.rotateRight([1,2,3,4,5],2); const p=[],f=[]; if(JSON.stringify(out)===JSON.stringify([4,5,1,2,3]))p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Use modulo by length."
      },
      {
        "level": 2,
        "text": "Slice tail then head."
      },
      {
        "level": 3,
        "text": "Don't mutate input."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Rotate Array Right</title>\n</head>\n<body>\n  <h1>Rotate Array Right</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function rotateRight(arr,k){const n=arr.length; k%=n; return arr.slice(n-k).concat(arr.slice(0,n-k));} window.rotateRight=rotateRight;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Rotate Array Right</title>\n</head>\n<body>\n  <h1>Rotate Array Right</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function rotateRight(arr,k){const a=arr.slice(); for(let i=0;i<k%a.length;i++){a.unshift(a.pop());} return a;} window.rotateRight=rotateRight;"
        }
      }
    ]
  },
  {
    "id": "js-015",
    "title": "Range Generator",
    "description": "Return [start, start+step, ...] up to end (inclusive if exact).",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Range Generator</title>\n</head>\n<body>\n  <h1>Range Generator</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction range(start,end,step=1) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.range = range;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Return [start, start+step, ...] up to end (inclusive if exact).",
        "type": "dom",
        "code": "const p=[],f=[]; const r1=window.range(1,5); const r2=window.range(0,6,2); if(JSON.stringify(r1)==='[1,2,3,4,5]')p.push('a1'); if(JSON.stringify(r2)==='[0,2,4,6]')p.push('a2'); return {passedIds:p, failedIds:f, passed:p.length===2};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "for-loop accumulating values."
      },
      {
        "level": 2,
        "text": "Handle custom step."
      },
      {
        "level": 3,
        "text": "Include end when divisible."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Range Generator</title>\n</head>\n<body>\n  <h1>Range Generator</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function range(start,end,step=1){const out=[]; for(let x=start; x<=end; x+=step) out.push(x); return out;} window.range=range;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Range Generator</title>\n</head>\n<body>\n  <h1>Range Generator</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function range(start,end,step=1){return Array.from({length: Math.floor((end-start)/step)+1},(_,i)=>start+i*step);} window.range=range;"
        }
      }
    ]
  },
  {
    "id": "js-016",
    "title": "Median",
    "description": "Return median of numeric array.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Median</title>\n</head>\n<body>\n  <h1>Median</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction median(arr) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.median = median;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Return median of numeric array.",
        "type": "dom",
        "code": "const fn=window.median; const p=[],f=[]; if(fn([3,1,2])===2)p.push('a1'); if(fn([1,2,3,4])===2.5)p.push('a2'); return {passedIds:p, failedIds:f, passed:p.length===2};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Sort a copy ascending."
      },
      {
        "level": 2,
        "text": "If odd: middle element."
      },
      {
        "level": 3,
        "text": "If even: average two middles."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Median</title>\n</head>\n<body>\n  <h1>Median</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function median(arr){const a=arr.slice().sort((x,y)=>x-y); const n=a.length; return n%2? a[(n-1)/2] : (a[n/2-1]+a[n/2])/2;} window.median=median;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Median</title>\n</head>\n<body>\n  <h1>Median</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function median(arr){const a=[...arr].sort((x,y)=>x-y); const n=a.length; if(n&1) return a[(n>>1)]; return (a[n/2-1]+a[n/2])/2;} window.median=median;"
        }
      }
    ]
  },
  {
    "id": "js-017",
    "title": "Prime Check",
    "description": "Return true if n is prime (n>=2).",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Prime Check</title>\n</head>\n<body>\n  <h1>Prime Check</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction isPrime(n) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.isPrime = isPrime;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Return true if n is prime (n>=2).",
        "type": "dom",
        "code": "const fn=window.isPrime; const p=[],f=[]; if(fn(2)&&fn(13)&&!fn(1)&&!fn(21))p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Early-return for n<2."
      },
      {
        "level": 2,
        "text": "Test divisors up to sqrt(n)."
      },
      {
        "level": 3,
        "text": "Skip even divisors after 2."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Prime Check</title>\n</head>\n<body>\n  <h1>Prime Check</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function isPrime(n){ if(n<2) return false; for(let d=2; d*d<=n; d++){ if(n%d===0) return false;} return true;} window.isPrime=isPrime;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Prime Check</title>\n</head>\n<body>\n  <h1>Prime Check</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function isPrime(n){ if(n<2) return false; if(n%2===0) return n===2; for(let d=3; d*d<=n; d+=2) if(n%d===0) return false; return true;} window.isPrime=isPrime;"
        }
      }
    ]
  },
  {
    "id": "js-018",
    "title": "Nth Fibonacci",
    "description": "Return nth Fibonacci (0-indexed).",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Nth Fibonacci</title>\n</head>\n<body>\n  <h1>Nth Fibonacci</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction fib(n) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.fib = fib;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Return nth Fibonacci (0-indexed).",
        "type": "dom",
        "code": "const fn=window.fib; const p=[],f=[]; if(fn(0)===0 && fn(1)===1 && fn(7)===13) p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Iterative approach is efficient."
      },
      {
        "level": 2,
        "text": "Track two variables."
      },
      {
        "level": 3,
        "text": "Avoid exponential recursion."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Nth Fibonacci</title>\n</head>\n<body>\n  <h1>Nth Fibonacci</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function fib(n){ let a=0,b=1; while(n--){ [a,b]=[b,a+b]; } return a;} window.fib=fib;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Nth Fibonacci</title>\n</head>\n<body>\n  <h1>Nth Fibonacci</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function fib(n,memo={}){ if(n in memo) return memo[n]; if(n<2) return n; return memo[n]=fib(n-1,memo)+fib(n-2,memo);} window.fib=fib;"
        }
      }
    ]
  },
  {
    "id": "js-019",
    "title": "Balanced Brackets",
    "description": "Return true if (), [], {} are balanced.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Balanced Brackets</title>\n</head>\n<body>\n  <h1>Balanced Brackets</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction balanced(s) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.balanced = balanced;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Return true if (), [], {} are balanced.",
        "type": "dom",
        "code": "const fn=window.balanced; const p=[],f=[]; if(fn('([])'))p.push('a1'); if(!fn('([)]'))p.push('a2'); if(fn('{[()]}'))p.push('a3'); return {passedIds:p, failedIds:f, passed:p.length===3};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Use a stack."
      },
      {
        "level": 2,
        "text": "Map closing to opening."
      },
      {
        "level": 3,
        "text": "Validate and ensure stack empty at end."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Balanced Brackets</title>\n</head>\n<body>\n  <h1>Balanced Brackets</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function balanced(s){const map={')':'(',']':'[','}':'{'}; const st=[]; for(const ch of s){ if(map[ch]){ if(st.pop()!==map[ch]) return false;} else if('([{'.includes(ch)) st.push(ch);} return st.length===0;} window.balanced=balanced;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Balanced Brackets</title>\n</head>\n<body>\n  <h1>Balanced Brackets</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function balanced(s){const st=[]; for(const ch of s){ if('([{'.includes(ch)) st.push(ch); else if(')]}'.includes(ch)){ const t=st.pop(); if((ch===')'&&t!=='(')||(ch===']'&&t!=='[')||(ch==='}'&&t!=='{')) return false;} } return st.length===0;} window.balanced=balanced;"
        }
      }
    ]
  },
  {
    "id": "js-020",
    "title": "Map Object Values",
    "description": "Apply f to each value of obj; return new object.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Map Object Values</title>\n</head>\n<body>\n  <h1>Map Object Values</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction mapValues(obj,f) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.mapValues = mapValues;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Apply f to each value of obj; return new object.",
        "type": "dom",
        "code": "const out=window.mapValues({a:1,b:2},x=>x*2); const p=[],f=[]; if(out.a===2 && out.b===4) p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Don't mutate input."
      },
      {
        "level": 2,
        "text": "Loop keys or use Object.entries."
      },
      {
        "level": 3,
        "text": "Construct a new object."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Map Object Values</title>\n</head>\n<body>\n  <h1>Map Object Values</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function mapValues(obj,f){const res={}; for(const k of Object.keys(obj)) res[k]=f(obj[k]); return res;} window.mapValues=mapValues;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Map Object Values</title>\n</head>\n<body>\n  <h1>Map Object Values</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function mapValues(obj,f){return Object.fromEntries(Object.entries(obj).map(([k,v])=>[k,f(v)]));} window.mapValues=mapValues;"
        }
      }
    ]
  },
  {
    "id": "js-021",
    "title": "Deep Clone (JSON-safe)",
    "description": "Deep clone a JSON-serializable value.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 2,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Deep Clone (JSON-safe)</title>\n</head>\n<body>\n  <h1>Deep Clone (JSON-safe)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction deepClone(v) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.deepClone = deepClone;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Deep clone a JSON-serializable value.",
        "type": "dom",
        "code": "const fn=window.deepClone; const o={a:1,b:{c:2}}, c=fn(o); const p=[],f=[]; if(JSON.stringify(c)===JSON.stringify(o) && c!==o && c.b!==o.b) p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "JSON parse/stringify works for JSON-safe values."
      },
      {
        "level": 2,
        "text": "No functions/undefined/symbols expected."
      },
      {
        "level": 3,
        "text": "Ensure new references for nested objects."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Deep Clone (JSON-safe)</title>\n</head>\n<body>\n  <h1>Deep Clone (JSON-safe)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function deepClone(v){return JSON.parse(JSON.stringify(v));} window.deepClone=deepClone;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Deep Clone (JSON-safe)</title>\n</head>\n<body>\n  <h1>Deep Clone (JSON-safe)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function deepClone(v){ if(v===null || typeof v!=='object') return v; if(Array.isArray(v)) return v.map(deepClone); const out={}; for(const k in v) out[k]=deepClone(v[k]); return out;} window.deepClone=deepClone;"
        }
      }
    ]
  },
  {
    "id": "js-022",
    "title": "Group By",
    "description": "Group array items by key function f; return {key: items}.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Group By</title>\n</head>\n<body>\n  <h1>Group By</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction groupBy(arr,f) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.groupBy = groupBy;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Group array items by key function f; return {key: items}.",
        "type": "dom",
        "code": "const out=window.groupBy(['ant','bat','bear'], x=>x[0]); const p=[],f=[]; if(JSON.stringify(out)==='{\"a\":[\"ant\"],\"b\":[\"bat\",\"bear\"]}') p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Iterate and accumulate into an object."
      },
      {
        "level": 2,
        "text": "Use key = f(item)."
      },
      {
        "level": 3,
        "text": "Initialize arrays as needed."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Group By</title>\n</head>\n<body>\n  <h1>Group By</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function groupBy(arr,f){const res={}; for(const x of arr){ const k=f(x); (res[k]||(res[k]=[])).push(x);} return res;} window.groupBy=groupBy;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Group By</title>\n</head>\n<body>\n  <h1>Group By</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function groupBy(arr,f){return arr.reduce((acc,x)=>{const k=f(x); (acc[k]||(acc[k]=[])).push(x); return acc;},{})} window.groupBy=groupBy;"
        }
      }
    ]
  },
  {
    "id": "js-023",
    "title": "Compose Functions",
    "description": "compose(f,g)(x) returns f(g(x)).",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Compose Functions</title>\n</head>\n<body>\n  <h1>Compose Functions</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction compose(f,g) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.compose = compose;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "compose(f,g)(x) returns f(g(x)).",
        "type": "dom",
        "code": "const fn=window.compose(x=>x+1, x=>x*2); const p=[],f=[]; if(fn(3)===7) p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Return a function that calls g then f."
      },
      {
        "level": 2,
        "text": "Preserve 'this' not needed here."
      },
      {
        "level": 3,
        "text": "Handle arguments if desired (single arg ok)."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Compose Functions</title>\n</head>\n<body>\n  <h1>Compose Functions</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function compose(f,g){ return (x)=>f(g(x)); } window.compose=compose;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Compose Functions</title>\n</head>\n<body>\n  <h1>Compose Functions</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function compose(f,g){ return function(){ return f(g.apply(null, arguments)); } } window.compose=compose;"
        }
      }
    ]
  },
  {
    "id": "js-024",
    "title": "Memoize (single-arg)",
    "description": "Memoize a single-argument pure function.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 2,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Memoize (single-arg)</title>\n</head>\n<body>\n  <h1>Memoize (single-arg)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction memoize(fn) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.memoize = memoize;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Memoize a single-argument pure function.",
        "type": "dom",
        "code": "const p=[],f=[]; let calls=0; const slow=x=>{calls++; return x*x;}; const m=window.memoize(slow); m(3); m(3); if(calls===1)p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Use a Map from arg to result."
      },
      {
        "level": 2,
        "text": "Return cached value on repeats."
      },
      {
        "level": 3,
        "text": "Assume JSON-serializable simple args."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Memoize (single-arg)</title>\n</head>\n<body>\n  <h1>Memoize (single-arg)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function memoize(fn){ const cache=new Map(); return (x)=> cache.has(x)? cache.get(x) : (cache.set(x, fn(x)), cache.get(x)); } window.memoize=memoize;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Memoize (single-arg)</title>\n</head>\n<body>\n  <h1>Memoize (single-arg)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function memoize(fn){ const cache={}; return (x)=> (x in cache)? cache[x] : (cache[x]=fn(x)); } window.memoize=memoize;"
        }
      }
    ]
  },
  {
    "id": "js-025",
    "title": "Curry (two-arg)",
    "description": "curry(f)(a)(b) == f(a,b).",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Curry (two-arg)</title>\n</head>\n<body>\n  <h1>Curry (two-arg)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction curry2(f) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.curry2 = curry2;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "curry(f)(a)(b) == f(a,b).",
        "type": "dom",
        "code": "const add=(a,b)=>a+b; const c=window.curry2(add); const p=[],f=[]; if(c(2)(3)===5) p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Return a function that returns a function."
      },
      {
        "level": 2,
        "text": "Capture first arg then call with second."
      },
      {
        "level": 3,
        "text": "Keep order (a,b)."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Curry (two-arg)</title>\n</head>\n<body>\n  <h1>Curry (two-arg)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function curry2(f){ return a=>b=>f(a,b); } window.curry2=curry2;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Curry (two-arg)</title>\n</head>\n<body>\n  <h1>Curry (two-arg)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function curry2(f){ function step(a){ return function(b){ return f(a,b); } } return step; } window.curry2=curry2;"
        }
      }
    ]
  },
  {
    "id": "js-026",
    "title": "Parse Query String",
    "description": "Parse '?a=1&b=hello' into {a:'1',b:'hello'}.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Parse Query String</title>\n</head>\n<body>\n  <h1>Parse Query String</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction parseQuery(qs) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.parseQuery = parseQuery;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Parse '?a=1&b=hello' into {a:'1',b:'hello'}.",
        "type": "dom",
        "code": "const p=[],f=[]; const o=window.parseQuery('?a=1&b=hello'); if(o.a==='1'&&o.b==='hello') p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Trim leading '?'."
      },
      {
        "level": 2,
        "text": "Split by '&', then '='."
      },
      {
        "level": 3,
        "text": "decodeURIComponent values."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Parse Query String</title>\n</head>\n<body>\n  <h1>Parse Query String</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function parseQuery(qs){ qs=qs.replace(/^\\?/,''); const out={}; if(!qs) return out; for(const pair of qs.split('&')){ const [k,v='']=pair.split('='); out[decodeURIComponent(k)]=decodeURIComponent(v); } return out;} window.parseQuery=parseQuery;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Parse Query String</title>\n</head>\n<body>\n  <h1>Parse Query String</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function parseQuery(qs){ const url=new URL('http://x/'+qs); return Object.fromEntries(url.searchParams.entries()); } window.parseQuery=parseQuery;"
        }
      }
    ]
  },
  {
    "id": "js-027",
    "title": "toCamelCase",
    "description": "Convert 'hello-world test' -> 'helloWorldTest'.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>toCamelCase</title>\n</head>\n<body>\n  <h1>toCamelCase</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction toCamelCase(s) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.toCamelCase = toCamelCase;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Convert 'hello-world test' -> 'helloWorldTest'.",
        "type": "dom",
        "code": "const r=window.toCamelCase('hello-world test'); const p=[],f=[]; if(r==='helloWorldTest')p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Split on non-alphanumeric."
      },
      {
        "level": 2,
        "text": "Lowercase first word; capitalize subsequent first letters."
      },
      {
        "level": 3,
        "text": "Join without separators."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>toCamelCase</title>\n</head>\n<body>\n  <h1>toCamelCase</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function toCamelCase(s){ const parts=s.toLowerCase().split(/[^a-z0-9]+/).filter(Boolean); return parts[0]+parts.slice(1).map(x=>x[0].toUpperCase()+x.slice(1)).join(''); } window.toCamelCase=toCamelCase;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>toCamelCase</title>\n</head>\n<body>\n  <h1>toCamelCase</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function toCamelCase(s){ return s.replace(/[^a-zA-Z0-9]+(.)/g,(m,chr)=>chr.toUpperCase()).replace(/^[A-Z]/,c=>c.toLowerCase()); } window.toCamelCase=toCamelCase;"
        }
      }
    ]
  },
  {
    "id": "js-028",
    "title": "fromCamelCase",
    "description": "Convert 'helloWorldTest' -> 'hello-world-test'.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>fromCamelCase</title>\n</head>\n<body>\n  <h1>fromCamelCase</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction fromCamelCase(s) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.fromCamelCase = fromCamelCase;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Convert 'helloWorldTest' -> 'hello-world-test'.",
        "type": "dom",
        "code": "const r=window.fromCamelCase('helloWorldTest'); const p=[],f=[]; if(r==='hello-world-test')p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Insert '-' before capitals."
      },
      {
        "level": 2,
        "text": "Lowercase result."
      },
      {
        "level": 3,
        "text": "Edge-cases: acronyms are fine."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>fromCamelCase</title>\n</head>\n<body>\n  <h1>fromCamelCase</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function fromCamelCase(s){ return s.replace(/([A-Z])/g,'-$1').toLowerCase(); } window.fromCamelCase=fromCamelCase;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>fromCamelCase</title>\n</head>\n<body>\n  <h1>fromCamelCase</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function fromCamelCase(s){ let out=''; for(const ch of s){ if(ch>='A'&&ch<='Z') out+='-'+ch.toLowerCase(); else out+=ch; } return out;} window.fromCamelCase=fromCamelCase;"
        }
      }
    ]
  },
  {
    "id": "js-029",
    "title": "Longest Common Prefix",
    "description": "Given array of strings, return longest common prefix.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Longest Common Prefix</title>\n</head>\n<body>\n  <h1>Longest Common Prefix</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction longestCommonPrefix(arr) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.longestCommonPrefix = longestCommonPrefix;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Given array of strings, return longest common prefix.",
        "type": "dom",
        "code": "const p=[],f=[]; const fn=window.longestCommonPrefix; if(fn(['flower','flow','flight'])==='fl')p.push('a1'); if(fn(['dog','racecar','car'])==='')p.push('a2'); return {passedIds:p, failedIds:f, passed:p.length===2};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Use first word as baseline."
      },
      {
        "level": 2,
        "text": "Shrink prefix until all match."
      },
      {
        "level": 3,
        "text": "Careful with empty arrays."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Longest Common Prefix</title>\n</head>\n<body>\n  <h1>Longest Common Prefix</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function longestCommonPrefix(arr){ if(!arr.length) return ''; let pre=arr[0]; for(const s of arr){ while(!s.startsWith(pre)) pre=pre.slice(0,-1); if(!pre) break; } return pre;} window.longestCommonPrefix=longestCommonPrefix;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Longest Common Prefix</title>\n</head>\n<body>\n  <h1>Longest Common Prefix</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function longestCommonPrefix(arr){ if(!arr.length) return ''; let i=0; while(arr.every(s=>s[i]!==undefined && s[i]===arr[0][i])) i++; return arr[0].slice(0,i);} window.longestCommonPrefix=longestCommonPrefix;"
        }
      }
    ]
  },
  {
    "id": "js-030",
    "title": "Array Intersection",
    "description": "Return array of values present in both arrays (unique, ordered by first).",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Array Intersection</title>\n</head>\n<body>\n  <h1>Array Intersection</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction intersection(a,b) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.intersection = intersection;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Return array of values present in both arrays (unique, ordered by first).",
        "type": "dom",
        "code": "const r=window.intersection([1,2,2,3],[2,3,4]); const p=[],f=[]; if(JSON.stringify(r)==='[2,3]')p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Use a Set for the second array."
      },
      {
        "level": 2,
        "text": "Track seen to avoid duplicates."
      },
      {
        "level": 3,
        "text": "Preserve order of first array."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Array Intersection</title>\n</head>\n<body>\n  <h1>Array Intersection</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function intersection(a,b){const set=new Set(b); const seen=new Set(); const out=[]; for(const x of a){ if(set.has(x) && !seen.has(x)){ seen.add(x); out.push(x); } } return out;} window.intersection=intersection;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Array Intersection</title>\n</head>\n<body>\n  <h1>Array Intersection</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function intersection(a,b){const sb=new Set(b); return [...new Set(a)].filter(x=>sb.has(x));} window.intersection=intersection;"
        }
      }
    ]
  },
  {
    "id": "js-031",
    "title": "Array Difference",
    "description": "Return items in a that are not in b (preserve order, unique).",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Array Difference</title>\n</head>\n<body>\n  <h1>Array Difference</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction difference(a,b) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.difference = difference;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Return items in a that are not in b (preserve order, unique).",
        "type": "dom",
        "code": "const r=window.difference([1,2,3,2],[2,4]); const p=[],f=[]; if(JSON.stringify(r)==='[1,3]')p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Use a Set for b."
      },
      {
        "level": 2,
        "text": "Skip duplicates."
      },
      {
        "level": 3,
        "text": "Keep order."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Array Difference</title>\n</head>\n<body>\n  <h1>Array Difference</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function difference(a,b){const sb=new Set(b); const seen=new Set(); const out=[]; for(const x of a){ if(!sb.has(x) && !seen.has(x)){ seen.add(x); out.push(x);} } return out;} window.difference=difference;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Array Difference</title>\n</head>\n<body>\n  <h1>Array Difference</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function difference(a,b){const sb=new Set(b); return [...new Set(a)].filter(x=>!sb.has(x));} window.difference=difference;"
        }
      }
    ]
  },
  {
    "id": "js-032",
    "title": "Pick Keys",
    "description": "Return new object with only listed keys.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Pick Keys</title>\n</head>\n<body>\n  <h1>Pick Keys</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction pick(obj, keys) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.pick = pick;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Return new object with only listed keys.",
        "type": "dom",
        "code": "const r=window.pick({a:1,b:2,c:3}, ['a','c']); const p=[],f=[]; if(JSON.stringify(r)==='{\"a\":1,\"c\":3}')p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Iterate keys array."
      },
      {
        "level": 2,
        "text": "Copy if key in obj."
      },
      {
        "level": 3,
        "text": "Don't mutate original."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Pick Keys</title>\n</head>\n<body>\n  <h1>Pick Keys</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function pick(obj,keys){const out={}; for(const k of keys){ if(Object.prototype.hasOwnProperty.call(obj,k)) out[k]=obj[k]; } return out;} window.pick=pick;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Pick Keys</title>\n</head>\n<body>\n  <h1>Pick Keys</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function pick(obj,keys){return Object.fromEntries(keys.filter(k=>k in obj).map(k=>[k,obj[k]]));} window.pick=pick;"
        }
      }
    ]
  },
  {
    "id": "js-033",
    "title": "Omit Keys",
    "description": "Return new object without listed keys.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Omit Keys</title>\n</head>\n<body>\n  <h1>Omit Keys</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction omit(obj, keys) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.omit = omit;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Return new object without listed keys.",
        "type": "dom",
        "code": "const r=window.omit({a:1,b:2,c:3}, ['b']); const p=[],f=[]; if(JSON.stringify(r)==='{\"a\":1,\"c\":3}')p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Copy all except excluded."
      },
      {
        "level": 2,
        "text": "Use Set for fast lookup."
      },
      {
        "level": 3,
        "text": "Avoid mutating input."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Omit Keys</title>\n</head>\n<body>\n  <h1>Omit Keys</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function omit(obj,keys){const ex=new Set(keys); const out={}; for(const k in obj){ if(!ex.has(k)) out[k]=obj[k]; } return out;} window.omit=omit;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Omit Keys</title>\n</head>\n<body>\n  <h1>Omit Keys</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function omit(obj,keys){const ex=new Set(keys); return Object.fromEntries(Object.entries(obj).filter(([k])=>!ex.has(k)));} window.omit=omit;"
        }
      }
    ]
  },
  {
    "id": "js-034",
    "title": "Greatest Common Divisor",
    "description": "Return gcd(a,b) where a,b>=0.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Greatest Common Divisor</title>\n</head>\n<body>\n  <h1>Greatest Common Divisor</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction gcd(a,b) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.gcd = gcd;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Return gcd(a,b) where a,b>=0.",
        "type": "dom",
        "code": "const fn=window.gcd; const p=[],f=[]; if(fn(54,24)===6)p.push('a1'); if(fn(0,5)===5)p.push('a2'); return {passedIds:p, failedIds:f, passed:p.length===2};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Use Euclidean algorithm."
      },
      {
        "level": 2,
        "text": "gcd(a,0)=a."
      },
      {
        "level": 3,
        "text": "Loop until remainder is 0."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Greatest Common Divisor</title>\n</head>\n<body>\n  <h1>Greatest Common Divisor</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function gcd(a,b){ while(b!==0){ [a,b]=[b, a%b]; } return Math.abs(a);} window.gcd=gcd;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Greatest Common Divisor</title>\n</head>\n<body>\n  <h1>Greatest Common Divisor</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function gcd(a,b){ a=Math.abs(a); b=Math.abs(b); if(b===0) return a; return gcd(b,a%b);} window.gcd=gcd;"
        }
      }
    ]
  },
  {
    "id": "js-035",
    "title": "Least Common Multiple",
    "description": "Return lcm(a,b) using gcd.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Least Common Multiple</title>\n</head>\n<body>\n  <h1>Least Common Multiple</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction lcm(a,b) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.lcm = lcm;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Return lcm(a,b) using gcd.",
        "type": "dom",
        "code": "const fn=window.lcm; const p=[],f=[]; if(fn(4,6)===12)p.push('a1'); if(fn(0,5)===0)p.push('a2'); return {passedIds:p, failedIds:f, passed:p.length===2};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Use |a*b|/gcd(a,b)."
      },
      {
        "level": 2,
        "text": "Handle zeros."
      },
      {
        "level": 3,
        "text": "Reuse gcd function or inline."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Least Common Multiple</title>\n</head>\n<body>\n  <h1>Least Common Multiple</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function lcm(a,b){ if(a===0||b===0) return 0; const gcd=(x,y)=>y?gcd(y,x%y):Math.abs(x); return Math.abs(a*b)/gcd(a,b);} window.lcm=lcm;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Least Common Multiple</title>\n</head>\n<body>\n  <h1>Least Common Multiple</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function lcm(a,b){ if(!a||!b) return 0; let x=Math.abs(a), y=Math.abs(b); while(y){ [x,y]=[y,x%y]; } return Math.abs(a*b)/x;} window.lcm=lcm;"
        }
      }
    ]
  },
  {
    "id": "js-036",
    "title": "Fast Power",
    "description": "Compute a^b using fast exponentiation (b>=0).",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 1,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Fast Power</title>\n</head>\n<body>\n  <h1>Fast Power</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction powFast(a,b) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.powFast = powFast;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Compute a^b using fast exponentiation (b>=0).",
        "type": "dom",
        "code": "const fn=window.powFast; const p=[],f=[]; if(fn(2,10)===1024)p.push('a1'); if(fn(5,0)===1)p.push('a2'); if(fn(3,1)===3)p.push('a3'); return {passedIds:p, failedIds:f, passed:p.length===3};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Exponentiation by squaring."
      },
      {
        "level": 2,
        "text": "Handle b=0."
      },
      {
        "level": 3,
        "text": "When b is odd, multiply once."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Fast Power</title>\n</head>\n<body>\n  <h1>Fast Power</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function powFast(a,b){ let res=1, x=a, e=b; while(e>0){ if(e&1) res*=x; x*=x; e>>=1; } return res;} window.powFast=powFast;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Fast Power</title>\n</head>\n<body>\n  <h1>Fast Power</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function powFast(a,b){ if(b===0) return 1; if(b%2===0) return powFast(a*a, Math.floor(b/2)); return a*powFast(a, b-1);} window.powFast=powFast;"
        }
      }
    ]
  },
  {
    "id": "js-037",
    "title": "Binary Search",
    "description": "Return index of target in sorted array, or -1.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 2,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Binary Search</title>\n</head>\n<body>\n  <h1>Binary Search</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction binarySearch(arr, target) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.binarySearch = binarySearch;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Return index of target in sorted array, or -1.",
        "type": "dom",
        "code": "const fn=window.binarySearch; const p=[],f=[]; if(fn([1,3,5,7,9],7)===3)p.push('a1'); if(fn([1,3,5],2)===-1)p.push('a2'); return {passedIds:p, failedIds:f, passed:p.length===2};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Maintain low/high pointers."
      },
      {
        "level": 2,
        "text": "Compare mid value."
      },
      {
        "level": 3,
        "text": "Narrow search bounds."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Binary Search</title>\n</head>\n<body>\n  <h1>Binary Search</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function binarySearch(arr,t){ let lo=0, hi=arr.length-1; while(lo<=hi){ const m=(lo+hi)>>1; if(arr[m]===t) return m; if(arr[m]<t) lo=m+1; else hi=m-1;} return -1;} window.binarySearch=binarySearch;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Binary Search</title>\n</head>\n<body>\n  <h1>Binary Search</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function binarySearch(arr,t){ return arr.indexOf(t); } window.binarySearch=binarySearch;"
        }
      }
    ]
  },
  {
    "id": "js-038",
    "title": "Merge Sort",
    "description": "Return a new array sorted ascending using merge sort.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 3,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Merge Sort</title>\n</head>\n<body>\n  <h1>Merge Sort</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction mergeSort(arr) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.mergeSort = mergeSort;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Return a new array sorted ascending using merge sort.",
        "type": "dom",
        "code": "const out=window.mergeSort([3,1,4,1,5]); const p=[],f=[]; if(JSON.stringify(out)==='[1,1,3,4,5]')p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Divide and conquer."
      },
      {
        "level": 2,
        "text": "Merge two sorted halves."
      },
      {
        "level": 3,
        "text": "Return a new array."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Merge Sort</title>\n</head>\n<body>\n  <h1>Merge Sort</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function mergeSort(arr){ if(arr.length<2) return arr.slice(); const mid=arr.length>>1; const L=mergeSort(arr.slice(0,mid)), R=mergeSort(arr.slice(mid)); const out=[]; let i=0,j=0; while(i<L.length&&j<R.length){ out.push(L[i]<=R[j]?L[i++]:R[j++]); } return out.concat(L.slice(i),R.slice(j)); } window.mergeSort=mergeSort;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Merge Sort</title>\n</head>\n<body>\n  <h1>Merge Sort</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function mergeSort(arr){ return arr.slice().sort((a,b)=>a-b); } window.mergeSort=mergeSort;"
        }
      }
    ]
  },
  {
    "id": "js-039",
    "title": "Top-K Frequent",
    "description": "Return the k most frequent elements in any order.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 3,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Top-K Frequent</title>\n</head>\n<body>\n  <h1>Top-K Frequent</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction topKFrequent(arr,k) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.topKFrequent = topKFrequent;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Return the k most frequent elements in any order.",
        "type": "dom",
        "code": "const r=window.topKFrequent([1,1,1,2,2,3],2); const p=[],f=[]; if(r.length===2 && r.includes(1) && r.includes(2)) p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Build a frequency map."
      },
      {
        "level": 2,
        "text": "Sort entries by count or bucket sort."
      },
      {
        "level": 3,
        "text": "Return first k keys."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Top-K Frequent</title>\n</head>\n<body>\n  <h1>Top-K Frequent</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function topKFrequent(arr,k){const m=new Map(); for(const x of arr) m.set(x,(m.get(x)||0)+1); return [...m.entries()].sort((a,b)=>b[1]-a[1]).slice(0,k).map(([x])=>x);} window.topKFrequent=topKFrequent;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Top-K Frequent</title>\n</head>\n<body>\n  <h1>Top-K Frequent</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function topKFrequent(arr,k){const m={}; for(const x of arr) m[x]=(m[x]||0)+1; const buckets=[]; for(const [x,c] of Object.entries(m)){ (buckets[c]||(buckets[c]=[])).push(+x); } const out=[]; for(let c=buckets.length-1;c>=0&&out.length<k;c--){ if(buckets[c]) out.push(...buckets[c]); } return out.slice(0,k);} window.topKFrequent=topKFrequent;"
        }
      }
    ]
  },
  {
    "id": "js-040",
    "title": "Roman to Integer",
    "description": "Convert a Roman numeral (I,V,X,L,C,D,M) to integer.",
    "why_it_matters": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders.",
    "difficulty": 2,
    "category": "javascript-logic",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Roman to Integer</title>\n</head>\n<body>\n  <h1>Roman to Integer</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction romanToInt(s) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.romanToInt = romanToInt;\n"
    },
    "tests": [
      {
        "id": "t1",
        "description": "Convert a Roman numeral (I,V,X,L,C,D,M) to integer.",
        "type": "dom",
        "code": "const fn=window.romanToInt; const p=[],f=[]; if(fn('III')===3)p.push('a1'); if(fn('IV')===4)p.push('a2'); if(fn('MCMXCIV')===1994)p.push('a3'); return {passedIds:p, failedIds:f, passed:p.length===3};"
      }
    ],
    "hints": [
      {
        "level": 1,
        "text": "Map symbols to values."
      },
      {
        "level": 2,
        "text": "Subtract when a smaller value precedes larger."
      },
      {
        "level": 3,
        "text": "Accumulate result."
      }
    ],
    "solutions": [
      {
        "id": "sol-1",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Roman to Integer</title>\n</head>\n<body>\n  <h1>Roman to Integer</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function romanToInt(s){ const val={I:1,V:5,X:10,L:50,C:100,D:500,M:1000}; let res=0; for(let i=0;i<s.length;i++){ const v=val[s[i]], n=val[s[i+1]]||0; res += v < n ? -v : v; } return res;} window.romanToInt=romanToInt;"
        }
      },
      {
        "id": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Roman to Integer</title>\n</head>\n<body>\n  <h1>Roman to Integer</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function romanToInt(s){ const val=new Map([['I',1],['V',5],['X',10],['L',50],['C',100],['D',500],['M',1000]]); let res=0, prev=0; for(let i=s.length-1;i>=0;i--){ const v=val.get(s[i]); res += v<prev? -v : v; prev=v; } return res;} window.romanToInt=romanToInt;"
        }
      }
    ]
  }
]