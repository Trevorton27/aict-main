[
  {
    "id": "html-001",
    "title": "Headings 101",
    "description": "Create a document with one <h1> and two <h2> elements describing a page title and two sections.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Headings 101</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add headings here -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelectorAll('h1').length === 1) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelectorAll('h2').length === 2) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\ntry {\n  if (document.querySelector('h1')?.textContent.trim().length > 0) { passed.push(\"a03\"); }\n  else { failed.push(\"a03\"); }\n} catch (e) { failed.push(\"a03\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Headings 101</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1>My Web Page</h1>\n<h2>Introduction</h2>\n<h2>Details</h2>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <h1> for the main title and <h2> for subsections."
      },
      {
        "level": 2,
        "text": "You need exactly one h1 and two h2."
      },
      {
        "level": 3,
        "text": "Copy: <h1>My Web Page</h1><h2>Introduction</h2><h2>Details</h2>"
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn headings 101 - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-002",
    "title": "Paragraphs & Line Breaks",
    "description": "Add two paragraphs. The first should contain a manual line break using <br>.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Paragraphs & Line Breaks</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add two paragraphs -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelectorAll('p').length === 2) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelectorAll('p')[0]?.innerHTML.includes('<br')) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Paragraphs & Line Breaks</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p>Hello line one<br>and line two.</p>\n<p>This is another paragraph.</p>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <p> for paragraphs."
      },
      {
        "level": 2,
        "text": "Use <br> for a manual line break in the first paragraph."
      },
      {
        "level": 3,
        "text": "Create two <p> elements; add a <br> in the first."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn paragraphs & line breaks - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-003",
    "title": "Links & Targets",
    "description": "Create a link to https://example.com that opens in a new tab and uses rel='noopener'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Links & Targets</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add a link -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('a[href=\"https://example.com\"]')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelector('a[href=\"https://example.com\"]').target === '_blank') { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\ntry {\n  if (document.querySelector('a[href=\"https://example.com\"]').rel.includes('noopener')) { passed.push(\"a03\"); }\n  else { failed.push(\"a03\"); }\n} catch (e) { failed.push(\"a03\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Links & Targets</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <a href=\"https://example.com\" target=\"_blank\" rel=\"noopener\">Visit Example</a>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <a href='...'>."
      },
      {
        "level": 2,
        "text": "To open in new tab, add target='_blank'."
      },
      {
        "level": 3,
        "text": "Also add rel='noopener' for security."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn links & targets - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-004",
    "title": "Images & Alt Text",
    "description": "Insert an image 'cat.jpg' with an alt describing the cat.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Images & Alt Text</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add an image -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('img[src=\"cat.jpg\"]')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelector('img[src=\"cat.jpg\"]').getAttribute('alt')?.trim().length > 0) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Images & Alt Text</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <img src=\"cat.jpg\" alt=\"A playful orange cat\">\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <img src='...' alt='...'>."
      },
      {
        "level": 2,
        "text": "Alt text should describe the image content."
      },
      {
        "level": 3,
        "text": "Example: <img src='cat.jpg' alt='A playful orange cat'>"
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn images & alt text - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-005",
    "title": "Unordered Lists",
    "description": "Create a bulleted list with three items: 'One', 'Two', 'Three'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Unordered Lists</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add an unordered list -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelectorAll('ul li').length === 3) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (Array.from(document.querySelectorAll('ul li')).map(li=>li.textContent.trim()).join(',') === 'One,Two,Three') { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Unordered Lists</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ul><li>One</li><li>Two</li><li>Three</li></ul>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <ul> with nested <li>."
      },
      {
        "level": 2,
        "text": "Create exactly three items with provided text."
      },
      {
        "level": 3,
        "text": "Copy the list: <ul><li>One</li><li>Two</li><li>Three</li></ul>"
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn unordered lists - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-006",
    "title": "Ordered Lists",
    "description": "Create a numbered list with items 'First', 'Second'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Ordered Lists</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add an ordered list -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelectorAll('ol li').length === 2) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (Array.from(document.querySelectorAll('ol li')).map(li=>li.textContent.trim()).join(',') === 'First,Second') { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Ordered Lists</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ol><li>First</li><li>Second</li></ol>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <ol> with <li>."
      },
      {
        "level": 2,
        "text": "Ensure two items only."
      },
      {
        "level": 3,
        "text": "<ol><li>First</li><li>Second</li></ol>"
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn ordered lists - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-007",
    "title": "Description Lists",
    "description": "Create a definition list with term 'HTML' and description 'Markup language'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Description Lists</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add a description list -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('dl dt') && !!document.querySelector('dl dd')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelector('dl dt')?.textContent.trim()==='HTML') { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\ntry {\n  if (document.querySelector('dl dd')?.textContent.trim()==='Markup language') { passed.push(\"a03\"); }\n  else { failed.push(\"a03\"); }\n} catch (e) { failed.push(\"a03\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Description Lists</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <dl><dt>HTML</dt><dd>Markup language</dd></dl>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <dl> with <dt> and <dd>."
      },
      {
        "level": 2,
        "text": "Place 'HTML' in dt and 'Markup language' in dd."
      },
      {
        "level": 3,
        "text": "Copy the example exactly."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn description lists - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-008",
    "title": "Semantic Layout",
    "description": "Add <header>, <nav>, <main>, and <footer> elements.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Semantic Layout</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Build semantic layout -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('header')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (!!document.querySelector('nav')) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\ntry {\n  if (!!document.querySelector('main')) { passed.push(\"a03\"); }\n  else { failed.push(\"a03\"); }\n} catch (e) { failed.push(\"a03\"); }\n\ntry {\n  if (!!document.querySelector('footer')) { passed.push(\"a04\"); }\n  else { failed.push(\"a04\"); }\n} catch (e) { failed.push(\"a04\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Semantic Layout</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <header>Site Header</header>\n<nav>Navigation</nav>\n<main>Main content</main>\n<footer>Footer</footer>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use the semantic tags directly."
      },
      {
        "level": 2,
        "text": "Include all four: header, nav, main, footer."
      },
      {
        "level": 3,
        "text": "Copy the minimal structure in the solution."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn semantic layout - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-009",
    "title": "Figure & Figcaption",
    "description": "Wrap an image inside <figure> with a <figcaption> describing it.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Figure & Figcaption</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add a figure with caption -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('figure img')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (!!document.querySelector('figure figcaption')) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\ntry {\n  if (document.querySelector('figure figcaption')?.textContent.trim().length>0) { passed.push(\"a03\"); }\n  else { failed.push(\"a03\"); }\n} catch (e) { failed.push(\"a03\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Figure & Figcaption</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <figure><img src=\"diagram.png\" alt=\"Architecture diagram\"><figcaption>System architecture diagram</figcaption></figure>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <figure> with nested <img> and <figcaption>."
      },
      {
        "level": 2,
        "text": "Include alt on the image and text in the caption."
      },
      {
        "level": 3,
        "text": "You can use 'diagram.png' and a simple sentence."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn figure & figcaption - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-010",
    "title": "Simple Table",
    "description": "Create a 2x2 table with headers 'A','B' and row '1','2'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Simple Table</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add a table -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('table thead th')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelectorAll('table thead th').length===2) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\ntry {\n  if (Array.from(document.querySelectorAll('table thead th')).map(th=>th.textContent.trim()).join(',')==='A,B') { passed.push(\"a03\"); }\n  else { failed.push(\"a03\"); }\n} catch (e) { failed.push(\"a03\"); }\n\ntry {\n  if (Array.from(document.querySelectorAll('table tbody td')).map(td=>td.textContent.trim()).join(',')==='1,2') { passed.push(\"a04\"); }\n  else { failed.push(\"a04\"); }\n} catch (e) { failed.push(\"a04\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Simple Table</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <table><thead><tr><th>A</th><th>B</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr></tbody></table>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use thead/tbody/ tr/th/td."
      },
      {
        "level": 2,
        "text": "Two headers A,B and one row 1,2."
      },
      {
        "level": 3,
        "text": "Follow the exact skeleton in the prompt."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn simple table - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-011",
    "title": "Form Labels",
    "description": "Create a form with a text input labeled 'Name'. The label should be explicitly associated.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Form Labels</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add form with label -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('form label[for]')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (!!document.querySelector('form input#name')) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\ntry {\n  if (document.querySelector('label[for=\"name\"]')!=null) { passed.push(\"a03\"); }\n  else { failed.push(\"a03\"); }\n} catch (e) { failed.push(\"a03\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Form Labels</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <form><label for=\"name\">Name</label><input id=\"name\" type=\"text\"></form>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <label for=\"id\"> to connect to an input with matching id."
      },
      {
        "level": 2,
        "text": "Input type can be text."
      },
      {
        "level": 3,
        "text": "See example: label+input with id name."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn form labels - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-012",
    "title": "Email Input",
    "description": "Add an email input named 'email' that is required.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Email Input</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add email input -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('input[type=\"email\"][name=\"email\"]')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelector('input[type=\"email\"][name=\"email\"]').required === true) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Email Input</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input type=\"email\" name=\"email\" required>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use type='email' and name='email'."
      },
      {
        "level": 2,
        "text": "Add the required attribute."
      },
      {
        "level": 3,
        "text": "<input type='email' name='email' required>"
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn email input - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-013",
    "title": "Fieldset & Legend",
    "description": "Group two radio inputs under a fieldset with legend 'Size'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Fieldset & Legend</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add fieldset with legend and radios -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('fieldset legend')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelector('fieldset legend')?.textContent.trim()==='Size') { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\ntry {\n  if (document.querySelectorAll('fieldset input[type=\"radio\"]').length===2) { passed.push(\"a03\"); }\n  else { failed.push(\"a03\"); }\n} catch (e) { failed.push(\"a03\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Fieldset & Legend</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <fieldset><legend>Size</legend><label><input type=\"radio\" name=\"size\" value=\"S\"> S</label><label><input type=\"radio\" name=\"size\" value=\"M\"> M</label></fieldset>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <fieldset><legend>..</legend>..</fieldset>."
      },
      {
        "level": 2,
        "text": "Include two radios sharing the same name."
      },
      {
        "level": 3,
        "text": "See example solution."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn fieldset & legend - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-014",
    "title": "Select Menu",
    "description": "Create a select named 'color' with options Red, Green, Blue.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Select Menu</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add select menu -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('select[name=\"color\"]')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelectorAll('select[name=\"color\"] option').length===3) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\ntry {\n  if (Array.from(document.querySelectorAll('select[name=\"color\"] option')).map(o=>o.textContent.trim()).join(',')==='Red,Green,Blue') { passed.push(\"a03\"); }\n  else { failed.push(\"a03\"); }\n} catch (e) { failed.push(\"a03\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Select Menu</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <select name=\"color\"><option>Red</option><option>Green</option><option>Blue</option></select>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <select> with nested <option> elements."
      },
      {
        "level": 2,
        "text": "Set name='color' and add three options."
      },
      {
        "level": 3,
        "text": "Copy the three options verbatim."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn select menu - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-015",
    "title": "Textarea",
    "description": "Add a textarea with placeholder 'Your message'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Textarea</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add textarea -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('textarea[placeholder=\"Your message\"]')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Textarea</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <textarea placeholder=\"Your message\"></textarea>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <textarea> and set placeholder."
      },
      {
        "level": 2,
        "text": "No name required here."
      },
      {
        "level": 3,
        "text": "<textarea placeholder='Your message'></textarea>"
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn textarea - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-016",
    "title": "Buttons & Types",
    "description": "Add two buttons: one type='submit' and one type='button'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Buttons & Types</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add two buttons -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelectorAll('button').length===2) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelector('button[type=\"submit\"]')!=null) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\ntry {\n  if (document.querySelector('button[type=\"button\"]')!=null) { passed.push(\"a03\"); }\n  else { failed.push(\"a03\"); }\n} catch (e) { failed.push(\"a03\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Buttons & Types</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button type=\"submit\">Send</button><button type=\"button\">Click</button>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use the button element."
      },
      {
        "level": 2,
        "text": "Set types explicitly."
      },
      {
        "level": 3,
        "text": "One submit, one button."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn buttons & types - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-017",
    "title": "Metadata Tags",
    "description": "Add a meta description with content 'Demo page'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Metadata Tags</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n  <meta name=\"description\" content=\"\">\n</head>\n<body>\n  <!-- Add meta description in head -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('meta[name=\"description\"]').getAttribute('content')==='Demo page') { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Metadata Tags</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n  <meta name=\"description\" content=\"Demo page\">\n</head>\n<body>\n  \n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <meta name='description' content='...'> inside <head>."
      },
      {
        "level": 2,
        "text": "Exact content must match."
      },
      {
        "level": 3,
        "text": "Place it after charset is fine."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn metadata tags - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-018",
    "title": "Favicon",
    "description": "Link a favicon 'favicon.ico' using <link rel='icon'>.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Favicon</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n  <!-- favicon here -->\n</head>\n<body>\n  <!-- Add favicon link in head -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('link[rel=\"icon\"][href=\"favicon.ico\"]')!=null) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Favicon</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n  <link rel=\"icon\" href=\"favicon.ico\">\n</head>\n<body>\n  \n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <link rel='icon' href='favicon.ico'> in <head>."
      },
      {
        "level": 2,
        "text": "Any position in head is fine."
      },
      {
        "level": 3,
        "text": "Ensure href matches exactly."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn favicon - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-019",
    "title": "Internal Anchors",
    "description": "Create a link that jumps to a section with id='target'. Add the target section.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Internal Anchors</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add internal link and target -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('a[href=\"#target\"]')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (!!document.getElementById('target')) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Internal Anchors</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <a href=\"#target\">Go to target</a>\n<section id=\"target\">Target section</section>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use id on the target element and an <a href='#id'> link."
      },
      {
        "level": 2,
        "text": "Any element can have the id."
      },
      {
        "level": 3,
        "text": "See example in the solution."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn internal anchors - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-020",
    "title": "mailto & tel Links",
    "description": "Add a mail link to 'info@example.com' and a phone link '+123456'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>mailto & tel Links</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add mailto and tel links -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('a[href=\"mailto:info@example.com\"]')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (!!document.querySelector('a[href=\"tel:+123456\"]')) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>mailto & tel Links</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <a href=\"mailto:info@example.com\">Email</a> <a href=\"tel:+123456\">Call</a>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use href='mailto:...' and href='tel:...'."
      },
      {
        "level": 2,
        "text": "Text is flexible but links must match exactly."
      },
      {
        "level": 3,
        "text": "Add two <a> elements."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn mailto & tel links - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-021",
    "title": "Blockquote & Cite",
    "description": "Add a blockquote with a cite attribute pointing to 'https://quotes.example'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Blockquote & Cite</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add blockquote -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('blockquote[cite=\"https://quotes.example\"]')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Blockquote & Cite</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <blockquote cite=\"https://quotes.example\">“Simplicity is prerequisite for reliability.”</blockquote>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <blockquote cite='...'>."
      },
      {
        "level": 2,
        "text": "Any quote text is okay."
      },
      {
        "level": 3,
        "text": "Ensure cite URL matches."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn blockquote & cite - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-022",
    "title": "Code & Pre",
    "description": "Show inline code with <code> and a preformatted block with <pre>.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Code & Pre</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add code and pre -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('code')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (!!document.querySelector('pre')) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Code & Pre</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p>Use <code>&lt;section&gt;</code> for sections.</p>\n<pre>const x = 1;\nconsole.log(x)</pre>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <code> for inline snippets and <pre> for blocks."
      },
      {
        "level": 2,
        "text": "You can escape angle brackets with &lt; &gt;."
      },
      {
        "level": 3,
        "text": "Add one of each."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn code & pre - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-023",
    "title": "HTML Entities",
    "description": "Display the characters < and > using entities in a paragraph.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>HTML Entities</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add paragraph showing entities -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('p')?.innerHTML.includes('&lt;') && document.querySelector('p')?.innerHTML.includes('&gt;')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>HTML Entities</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p>Use &lt;em&gt; to emphasize &gt; text.</p>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use &lt; and &gt; entities."
      },
      {
        "level": 2,
        "text": "Place them inside a <p>."
      },
      {
        "level": 3,
        "text": "Example provided."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn html entities - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-024",
    "title": "HTML Comments",
    "description": "Add an HTML comment containing the word TODO.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>HTML Comments</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add comment with TODO -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.documentElement.innerHTML.includes('<!--') && document.documentElement.innerHTML.includes('TODO')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>HTML Comments</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- TODO: fill later -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "HTML comments look like <!-- ... -->."
      },
      {
        "level": 2,
        "text": "Include the word TODO."
      },
      {
        "level": 3,
        "text": "Place it anywhere in the body."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn html comments - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-025",
    "title": "Navigation List",
    "description": "Create a nav containing an unordered list with three links.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Navigation List</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add nav with list -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('nav ul')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelectorAll('nav ul li a').length===3) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Navigation List</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <nav><ul><li><a href=\"#\">A</a></li><li><a href=\"#\">B</a></li><li><a href=\"#\">C</a></li></ul></nav>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Wrap the list inside <nav>."
      },
      {
        "level": 2,
        "text": "Add three <a> elements."
      },
      {
        "level": 3,
        "text": "Follow the structure nav > ul > li > a"
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn navigation list - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-026",
    "title": "Footer Smallprint",
    "description": "Add a footer with a small element containing '© 2025'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Footer Smallprint</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add footer smallprint -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('footer small')?.textContent.includes('© 2025')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Footer Smallprint</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <footer><small>© 2025</small></footer>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <footer> with nested <small>."
      },
      {
        "level": 2,
        "text": "Include the © symbol and year."
      },
      {
        "level": 3,
        "text": "Place the text exactly as in the example."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn footer smallprint - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-027",
    "title": "Article & Section",
    "description": "Create an article containing a section with a heading.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Article & Section</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add article with section -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('article section h2')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Article & Section</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <article><section><h2>About</h2><p>Text</p></section></article>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Nest <section> inside <article>."
      },
      {
        "level": 2,
        "text": "Add a heading inside the section."
      },
      {
        "level": 3,
        "text": "h2 is fine for the section heading."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn article & section - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-028",
    "title": "Address Element",
    "description": "Use the <address> element to show a contact email link.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Address Element</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add address with email -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('address a[href^=\"mailto:\"]')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Address Element</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <address>Contact: <a href=\"mailto:support@example.com\">support@example.com</a></address>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <address> for contact information."
      },
      {
        "level": 2,
        "text": "Include a mailto link."
      },
      {
        "level": 3,
        "text": "Follow the example."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn address element - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-029",
    "title": "Abbreviation",
    "description": "Use <abbr> for the term 'HTML' with title='HyperText Markup Language'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Abbreviation</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add abbr -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('abbr[title=\"HyperText Markup Language\"]')?.textContent.trim()==='HTML') { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Abbreviation</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p><abbr title=\"HyperText Markup Language\">HTML</abbr> is the standard.</p>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Add the title attribute explaining the abbreviation."
      },
      {
        "level": 2,
        "text": "Text content should be HTML."
      },
      {
        "level": 3,
        "text": "See example."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn abbreviation - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-030",
    "title": "Time Element",
    "description": "Display 'March 1, 2025' using <time datetime='2025-03-01'>.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Time Element</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add time element -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('time[datetime=\"2025-03-01\"]')?.textContent.includes('March') || document.querySelector('time[datetime=\"2025-03-01\"]')?.textContent.includes('2025')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Time Element</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p>Event: <time datetime=\"2025-03-01\">March 1, 2025</time></p>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <time> with a machine-readable datetime."
      },
      {
        "level": 2,
        "text": "Human text can say March 1, 2025."
      },
      {
        "level": 3,
        "text": "Put it inside a paragraph."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn time element - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-031",
    "title": "Details & Summary",
    "description": "Create a collapsible details widget with summary 'More info'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Details & Summary</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add details -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('details summary')?.textContent.trim()==='More info') { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Details & Summary</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <details><summary>More info</summary><p>Hidden text</p></details>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <details> with a <summary>."
      },
      {
        "level": 2,
        "text": "Text must match 'More info'."
      },
      {
        "level": 3,
        "text": "Any content inside is fine."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn details & summary - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-032",
    "title": "Progress",
    "description": "Add a progress bar with value 30 of max 100.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Progress</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add progress -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('progress[value=\"30\"][max=\"100\"]')!=null) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Progress</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <progress value=\"30\" max=\"100\">30%</progress>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <progress value='..' max='..'>."
      },
      {
        "level": 2,
        "text": "Values must be 30 and 100."
      },
      {
        "level": 3,
        "text": "Include text 30% if you like."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn progress - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-033",
    "title": "Meter",
    "description": "Add a meter with value 0.7 between 0 and 1.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Meter</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add meter -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('meter[value=\"0.7\"][min=\"0\"][max=\"1\"]')!=null) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Meter</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <meter min=\"0\" max=\"1\" value=\"0.7\">70%</meter>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <meter> with min, max and value."
      },
      {
        "level": 2,
        "text": "Use 0, 1, and 0.7."
      },
      {
        "level": 3,
        "text": "Any text is fine."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn meter - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-034",
    "title": "Accessible Iframe",
    "description": "Embed an iframe to 'about:blank' with a title 'preview'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Accessible Iframe</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add iframe -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('iframe[title=\"preview\"][src=\"about:blank\"]')!=null) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Accessible Iframe</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <iframe src=\"about:blank\" title=\"preview\"></iframe>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Always add a title to iframes."
      },
      {
        "level": 2,
        "text": "Use about:blank for the src."
      },
      {
        "level": 3,
        "text": "Copy the example."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn accessible iframe - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-035",
    "title": "ARIA Label",
    "description": "Add a search input with aria-label='Search site'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>ARIA Label</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add aria-labeled input -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('input[type=\"search\"][aria-label=\"Search site\"]')!=null) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>ARIA Label</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input type=\"search\" aria-label=\"Search site\">\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use type='search' and aria-label."
      },
      {
        "level": 2,
        "text": "Text must match exactly."
      },
      {
        "level": 3,
        "text": "Place the input in body."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn aria label - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-036",
    "title": "Data Attributes",
    "description": "Add a div with data-role='card' and text 'Card'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Data Attributes</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add data-role card -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('div[data-role=\"card\"]')?.textContent.trim()==='Card') { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Data Attributes</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div data-role=\"card\">Card</div>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use a data-* attribute."
      },
      {
        "level": 2,
        "text": "Value must be 'card'."
      },
      {
        "level": 3,
        "text": "Text content 'Card'."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn data attributes - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-037",
    "title": "IDs & Classes",
    "description": "Create a div with id='box' and class='panel'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>IDs & Classes</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add id and class -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.getElementById('box')!=null) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelector('#box.panel')!=null) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>IDs & Classes</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id=\"box\" class=\"panel\">Content</div>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use id and class attributes."
      },
      {
        "level": 2,
        "text": "Selectability matters: #box.panel should match."
      },
      {
        "level": 3,
        "text": "Copy the example."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn ids & classes - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-038",
    "title": "Strong & Emphasis",
    "description": "Create a sentence with both <strong> and <em>.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Strong & Emphasis</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add strong + em -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('strong') && !!document.querySelector('em')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Strong & Emphasis</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p>This is <strong>important</strong> and <em>emphasized</em>.</p>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Wrap words in <strong> and <em>."
      },
      {
        "level": 2,
        "text": "Place them inside a sentence."
      },
      {
        "level": 3,
        "text": "See solution."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn strong & emphasis - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-039",
    "title": "Superscript & Subscript",
    "description": "Show H2O with the 2 as subscript and 10^2 with 2 as superscript.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Superscript & Subscript</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add sub and sup -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.body.innerHTML.includes('H<sub>2</sub>O')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.body.innerHTML.includes('10<sup>2</sup>')) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Superscript & Subscript</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p>Chemistry: H<sub>2</sub>O</p><p>Math: 10<sup>2</sup></p>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <sub> and <sup> around the numbers."
      },
      {
        "level": 2,
        "text": "Include both examples."
      },
      {
        "level": 3,
        "text": "Follow solution markup."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn superscript & subscript - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-040",
    "title": "Small & Mark",
    "description": "Add a sentence using <mark> to highlight a word and <small> for fine print.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Small & Mark</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add mark and small -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('mark')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (!!document.querySelector('small')) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Small & Mark</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p>Remember to <mark>save</mark> often.</p><small>Terms apply.</small>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <mark> to highlight and <small> for fine print."
      },
      {
        "level": 2,
        "text": "Include both elements in the document."
      },
      {
        "level": 3,
        "text": "See example."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn small & mark - a fundamental web development concept used in modern websites."
  },
  {
    "id": "css-001",
    "title": "Change Text Color",
    "description": "Set the paragraph text color to blue.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Change Text Color</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p id='p1'>Hello, CSS!</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Set the paragraph color to blue */\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const el=document.querySelector('#p1'); const s=getComputedStyle(el); const passed=[], failed=[]; if(s.color==='rgb(0, 0, 255)'){passed.push('a01')}else{failed.push('a01')} return {passedIds:passed, failedIds:failed, passed:failed.length===0};",
        "label": "Paragraph text color is blue."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Change Text Color</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p id='p1'>Hello, CSS!</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#p1 { color: blue; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use the color property."
      },
      {
        "level": 2,
        "text": "Target the #p1 element."
      },
      {
        "level": 3,
        "text": "#p1 { color: blue; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "inline",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Change Text Color</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p id='p1' style='color: blue'>Hello, CSS!</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not needed */\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn change text color - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-002",
    "title": "Add a Red Border",
    "description": "Add a 2px solid red border to the div with id='box'.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Add a Red Border</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='box'>Hello border</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Add a red border to #box */\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#box')); const passed=[], failed=[]; if(s.borderTopWidth==='2px' && s.borderTopStyle==='solid' && s.borderTopColor==='rgb(255, 0, 0)'){passed.push('a01')}else{failed.push('a01')} return {passedIds:passed, failedIds:failed, passed:failed.length===0};",
        "label": "#box has a 2px solid red border."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Add a Red Border</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='box'>Hello border</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#box { border: 2px solid red; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use the border property."
      },
      {
        "level": 2,
        "text": "border: 2px solid red;"
      },
      {
        "level": 3,
        "text": "#box { border: 2px solid red; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "inline",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Add a Red Border</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='box' style='border:2px solid red'>Hello border</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn add a red border - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-003",
    "title": "Center Text Horizontally",
    "description": "Horizontally center the text inside the div using CSS.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Center Text Horizontally</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='centerme'>Center me!</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Center text in #centerme */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#centerme')); const passed=[], failed=[]; if(s.textAlign==='center'){passed.push('a01')}else{failed.push('a01')} return {passedIds:passed, failedIds:failed, passed:failed.length===0};",
        "label": "Text is centered."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Center Text Horizontally</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='centerme'>Center me!</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#centerme { text-align: center; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use text-align."
      },
      {
        "level": 2,
        "text": "Target #centerme."
      },
      {
        "level": 3,
        "text": "#centerme { text-align: center; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "flexbox",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Center Text Horizontally</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='centerme'>Center me!</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#centerme { display:flex; justify-content:center; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn center text horizontally - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-004",
    "title": "Add Padding",
    "description": "Add 20px padding to the box.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Add Padding</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='pad'>Padding please</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Add 20px padding to the box. */\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#pad')); const p=[],f=[]; if(s.paddingTop==='20px'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Add 20px padding to the box."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Add Padding</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='pad'>Padding please</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#pad { padding: 20px; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use padding."
      },
      {
        "level": 2,
        "text": "Target the provided element."
      },
      {
        "level": 3,
        "text": "#pad { padding: 20px; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "inline",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Add Padding</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='pad' style=\"padding: 20px;\">Padding please</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* alternative */\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn add padding - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-005",
    "title": "Set Background Color",
    "description": "Set the page background to yellow.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Set Background Color</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p>Background test</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Set the page background to yellow. */\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.body); const p=[],f=[]; if(s.backgroundColor==='rgb(255, 255, 0)'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Set the page background to yellow."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Set Background Color</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p>Background test</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "body { background-color: yellow; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use background-color on body."
      },
      {
        "level": 2,
        "text": "Target the provided element."
      },
      {
        "level": 3,
        "text": "body { background-color: yellow; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "inline",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Set Background Color</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p style=\"background-color: yellow;\">Background test</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* alternative */\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn set background color - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-006",
    "title": "Add Margin",
    "description": "Add 30px margin-top to the paragraph.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Add Margin</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p id='mt'>A paragraph</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Add 30px margin-top to the paragraph. */\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#mt')); const p=[],f=[]; if(s.marginTop==='30px'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Add 30px margin-top to the paragraph."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Add Margin</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p id='mt'>A paragraph</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#mt { margin-top: 30px; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use margin-top."
      },
      {
        "level": 2,
        "text": "Target the provided element."
      },
      {
        "level": 3,
        "text": "#mt { margin-top: 30px; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "inline",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Add Margin</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p id='mt' style=\"margin-top: 30px;\">A paragraph</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* alternative */\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn add margin - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-007",
    "title": "Font Size",
    "description": "Set the h1 font size to 2em.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Font Size</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1 id='big'>Heading</h1>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Set the h1 font size to 2em. */\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#big')); const p=[],f=[]; if(s.fontSize==='32px'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Set the h1 font size to 2em."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Font Size</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1 id='big'>Heading</h1>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "h1#big { font-size: 2em; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use font-size."
      },
      {
        "level": 2,
        "text": "Target the provided element."
      },
      {
        "level": 3,
        "text": "h1#big { font-size: 2em; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "inline",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Font Size</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1 id='big' style=\"font-size: 2em;\">Heading</h1>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* alternative */\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn font size - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-008",
    "title": "Monospace for Code",
    "description": "Use a monospace font for the code element.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Monospace for Code</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <code id='c'>const x=1;</code>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Use a monospace font for the code element. */\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#c')); const p=[],f=[]; if((s.fontFamily||'').toLowerCase().includes('monospace')){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Use a monospace font for the code element."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Monospace for Code</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <code id='c'>const x=1;</code>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "code#c { font-family: monospace; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use font-family."
      },
      {
        "level": 2,
        "text": "Target the provided element."
      },
      {
        "level": 3,
        "text": "code#c { font-family: monospace; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "inline",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Monospace for Code</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <code id='c' style=\"font-family: monospace;\">const x=1;</code>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* alternative */\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn monospace for code - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-009",
    "title": "Make Text Bold",
    "description": "Make all span text bold.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Make Text Bold</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <span id='b'>Bold me</span>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Make all span text bold. */\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#b')); const p=[],f=[]; if(parseInt(s.fontWeight)>=700){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Make all span text bold."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Make Text Bold</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <span id='b'>Bold me</span>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "span#b { font-weight: bold; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use font-weight."
      },
      {
        "level": 2,
        "text": "Target the provided element."
      },
      {
        "level": 3,
        "text": "span#b { font-weight: bold; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "inline",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Make Text Bold</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <span id='b' style=\"font-weight: bold;\">Bold me</span>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* alternative */\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn make text bold - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-010",
    "title": "Italic Notes",
    "description": "Italicize text in class 'note'.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Italic Notes</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p class='note' id='n'>Note text</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Italicize text in class 'note'. */\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#n')); const p=[],f=[]; if(s.fontStyle==='italic'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Italicize text in class 'note'."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Italic Notes</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p class='note' id='n'>Note text</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": ".note#n { font-style: italic; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use font-style."
      },
      {
        "level": 2,
        "text": "Target the provided element."
      },
      {
        "level": 3,
        "text": ".note#n { font-style: italic; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "inline",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Italic Notes</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p class='note' id='n' style=\"font-style: italic;\">Note text</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* alternative */\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn italic notes - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-011",
    "title": "Underline Links",
    "description": "Underline all anchor links.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Underline Links</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <a id='lnk' href='#'>link</a>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Underline all anchor links. */\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#lnk')); const p=[],f=[]; if((s.textDecorationLine||'').includes('underline')){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Underline all anchor links."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Underline Links</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <a id='lnk' href='#'>link</a>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "a#lnk { text-decoration: underline; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use text-decoration."
      },
      {
        "level": 2,
        "text": "Target the provided element."
      },
      {
        "level": 3,
        "text": "a#lnk { text-decoration: underline; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "inline",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Underline Links</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <a id='lnk' href='#' style=\"text-decoration: underline;\">link</a>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* alternative */\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn underline links - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-012",
    "title": "Remove List Bullets",
    "description": "Remove bullets from the unordered list.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Remove List Bullets</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ul id='u'><li>One</li><li>Two</li></ul>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Remove bullets from the unordered list. */\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#u')); const p=[],f=[]; if(s.listStyleType==='none'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Remove bullets from the unordered list."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Remove List Bullets</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ul id='u'><li>One</li><li>Two</li></ul>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "ul#u { list-style-type: none; padding-left: 0; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use list-style-type."
      },
      {
        "level": 2,
        "text": "Target the provided element."
      },
      {
        "level": 3,
        "text": "ul#u { list-style-type: none; padding-left: 0; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "inline",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Remove List Bullets</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ul id='u' style=\"list-style-type: none; padding-left: 0;\"><li>One</li><li>Two</li></ul>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* alternative */\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn remove list bullets - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-013",
    "title": "Style Ordered List Markers",
    "description": "Make ordered list numbers red and bold using ::marker.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Style Ordered List Markers</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ol id='ol'><li>A</li><li>B</li></ol>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Style ::marker for #ol */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const el=document.querySelector('#ol'); const m=getComputedStyle(el.querySelector('li'), '::marker'); const p=[],f=[]; if(m.color==='rgb(255, 0, 0)'){p.push('a01')}else{f.push('a01')} if((m.fontWeight+'')>='700'){p.push('a02')}else{f.push('a02')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Marker is red and bold."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Style Ordered List Markers</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ol id='ol'><li>A</li><li>B</li></ol>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#ol li::marker { color: red; font-weight: bold; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use the ::marker pseudo-element."
      },
      {
        "level": 2,
        "text": "Target #ol li::marker."
      },
      {
        "level": 3,
        "text": "#ol li::marker { color: red; font-weight: bold; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "counterstyle",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Style Ordered List Markers</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ol id='ol'><li>A</li><li>B</li></ol>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#ol { counter-reset: i; } #ol li { counter-increment: i; } #ol li::marker { color:red; font-weight:bold; content: counter(i) '. '; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn style ordered list markers - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-014",
    "title": "Responsive Image Max-Width",
    "description": "Make the image fill its container width but not exceed 400px.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Responsive Image Max-Width</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='wrap' style='width:500px'><img id='pic' src='x.jpg' alt='x'></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Make #pic responsive with max-width 400px */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const img=document.querySelector('#pic'); const p=[],f=[]; const w=getComputedStyle(img).width; if(w==='400px'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Computed width should be 400px due to max-width."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Responsive Image Max-Width</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='wrap' style='width:500px'><img id='pic' src='x.jpg' alt='x'></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#pic { width: 100%; max-width: 400px; height: auto; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use width:100% with max-width."
      },
      {
        "level": 2,
        "text": "Target #pic."
      },
      {
        "level": 3,
        "text": "#pic { width: 100%; max-width: 400px; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "container-variant",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Responsive Image Max-Width</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='wrap' style='width:380px'><img id='pic' src='x.jpg' alt='x'></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#pic { width: 100%; max-width: 400px; height:auto; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn responsive image max-width - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-015",
    "title": "Focus Input Highlight",
    "description": "When the input is focused, show a blue border or outline.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Focus Input Highlight</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='email' type='text' value='x'>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Style :focus for #email */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const el=document.querySelector('#email'); el.focus(); const s=getComputedStyle(el); const p=[],f=[]; if(s.borderTopColor==='rgb(0, 0, 255)' || s.outlineColor==='rgb(0, 0, 255)'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Focus style is blue."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Focus Input Highlight</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='email' type='text' value='x'>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#email { border:1px solid #999; } #email:focus { border-color: blue; outline: none; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use the :focus pseudo-class."
      },
      {
        "level": 2,
        "text": "Set border-color or outline."
      },
      {
        "level": 3,
        "text": "#email:focus { border-color: blue; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "outline",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Focus Input Highlight</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='email' type='text' value='x'>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#email:focus { outline: 2px solid blue; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn focus input highlight - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-016",
    "title": "Disabled Button Style",
    "description": "Style disabled buttons with a gray look.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Disabled Button Style</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='btn' disabled>Save</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Style disabled button */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#btn')); const p=[],f=[]; if(s.backgroundColor==='rgb(204, 204, 204)' || s.opacity==='0.5'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Gray background or reduced opacity."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Disabled Button Style</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='btn' disabled>Save</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "button:disabled { background:#ccc; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use :disabled selector."
      },
      {
        "level": 2,
        "text": "Set background-color or opacity."
      },
      {
        "level": 3,
        "text": "button:disabled { background:#ccc; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "opacity",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Disabled Button Style</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='btn' disabled>Save</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "button:disabled { opacity: .5; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn disabled button style - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-017",
    "title": "Bigger Checkboxes",
    "description": "Make checkboxes 30px by 30px.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Bigger Checkboxes</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <label><input id='cb' type='checkbox'> Opt</label>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Enlarge checkbox */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#cb')); const p=[],f=[]; if(s.width==='30px' && s.height==='30px'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Checkbox has 30x30 size."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Bigger Checkboxes</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <label><input id='cb' type='checkbox'> Opt</label>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#cb { width:30px; height:30px; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Set width and height on input[type=checkbox]."
      },
      {
        "level": 2,
        "text": "You may need appearance:none for full control."
      },
      {
        "level": 3,
        "text": "#cb { width:30px; height:30px; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "appearance",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Bigger Checkboxes</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <label><input id='cb' type='checkbox'> Opt</label>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#cb { appearance: none; width:30px; height:30px; border:2px solid #333; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn bigger checkboxes - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-018",
    "title": "Circular Avatar",
    "description": "Make the avatar image perfectly circular.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Circular Avatar</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <img id='avatar' class='avatar' src='x.jpg' alt='avatar' width='100' height='100'>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Make .avatar circular */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#avatar')); const p=[],f=[]; if(s.borderRadius==='50%'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "border-radius 50%."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Circular Avatar</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <img id='avatar' class='avatar' src='x.jpg' alt='avatar' width='100' height='100'>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": ".avatar { border-radius:50%; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use border-radius."
      },
      {
        "level": 2,
        "text": "50% makes circles."
      },
      {
        "level": 3,
        "text": ".avatar { border-radius:50%; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "inline",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Circular Avatar</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <img id='avatar' class='avatar' style='border-radius:50%' src='x.jpg' alt='avatar' width='100' height='100'>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn circular avatar - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-019",
    "title": "Card Shadow",
    "description": "Add a shadow to the card element.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Card Shadow</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div class='card' id='card'>Card</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Add box-shadow */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#card')); const p=[],f=[]; if(s.boxShadow && s.boxShadow!=='none' && s.boxShadow!==''){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "box-shadow is applied."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Card Shadow</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div class='card' id='card'>Card</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": ".card { box-shadow: 0 2px 8px rgba(0,0,0,.2); }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use box-shadow."
      },
      {
        "level": 2,
        "text": "Any non-none value passes."
      },
      {
        "level": 3,
        "text": ".card { box-shadow: 0 2px 8px rgba(0,0,0,.2); }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "elevation",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Card Shadow</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div class='card' id='card'>Card</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": ".card { box-shadow: 0 1px 3px rgba(0,0,0,.12), 0 1px 2px rgba(0,0,0,.24); }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn card shadow - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-020",
    "title": "Add a Transition",
    "description": "Add a non-zero-duration transition to the button.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Add a Transition</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='btn2' class='btn'>Hover me</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Add transition to .btn */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#btn2')); const p=[],f=[]; if(s.transitionDuration!=='0s'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Transition is defined."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Add a Transition</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='btn2' class='btn'>Hover me</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": ".btn { transition: transform .2s ease; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use transition property."
      },
      {
        "level": 2,
        "text": "Set duration like .2s."
      },
      {
        "level": 3,
        "text": ".btn { transition: transform .2s ease; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "opacity",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Add a Transition</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='btn2' class='btn'>Hover me</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": ".btn { transition: opacity .3s ease; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn add a transition - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-021",
    "title": "Two-Column Grid",
    "description": "Create a two-column grid using 1fr 1fr.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Two-Column Grid</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='grid' class='grid'><div>a</div><div>b</div></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Make #grid a 2-col grid */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#grid')); const p=[],f=[]; if(s.display==='grid' && s.gridTemplateColumns.replace(/\\s+/g,'')==='1fr1fr'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Grid with two equal columns."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Two-Column Grid</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='grid' class='grid'><div>a</div><div>b</div></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#grid { display:grid; grid-template-columns: 1fr 1fr; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use display:grid."
      },
      {
        "level": 2,
        "text": "Set grid-template-columns: 1fr 1fr."
      },
      {
        "level": 3,
        "text": "#grid { display:grid; grid-template-columns: 1fr 1fr; gap: 0; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "repeat",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Two-Column Grid</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='grid' class='grid'><div>a</div><div>b</div></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#grid { display:grid; grid-template-columns: repeat(2, 1fr); }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn two-column grid - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-022",
    "title": "Flexbox Center Both Axes",
    "description": "Use flexbox to center the inner box horizontally and vertically.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Flexbox Center Both Axes</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='wrap2' style='height:200px'><div id='box2'>Hi</div></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Center with flexbox */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#wrap2')); const p=[],f=[]; if(s.display==='flex' && s.justifyContent==='center' && s.alignItems==='center'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Container centers on both axes."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Flexbox Center Both Axes</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='wrap2' style='height:200px'><div id='box2'>Hi</div></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#wrap2 { display:flex; justify-content:center; align-items:center; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "display:flex; justify-content:center; align-items:center."
      },
      {
        "level": 2,
        "text": "Target #wrap2."
      },
      {
        "level": 3,
        "text": "#wrap2 { display:flex; justify-content:center; align-items:center; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "grid",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Flexbox Center Both Axes</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='wrap2' style='height:200px'><div id='box2'>Hi</div></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#wrap2 { display:grid; place-items:center; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn flexbox center both axes - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-023",
    "title": "Hide Element",
    "description": "Hide the element with id 'hide-me'.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Hide Element</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='hide-me'>You shouldn't see me</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Hide #hide-me */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#hide-me')); const p=[],f=[]; if(s.display==='none' || s.visibility==='hidden'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Element is hidden."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Hide Element</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='hide-me'>You shouldn't see me</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#hide-me { display:none; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use display:none or visibility:hidden."
      },
      {
        "level": 2,
        "text": "Target #hide-me."
      },
      {
        "level": 3,
        "text": "#hide-me { display:none; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "visibility",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Hide Element</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='hide-me'>You shouldn't see me</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#hide-me { visibility:hidden; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn hide element - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-024",
    "title": "Sticky Header",
    "description": "Make the header stick to the top of the viewport.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Sticky Header</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <header id='hdr'>Header</header><main style='height:1200px'>Content</main>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Sticky header */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#hdr')); const p=[],f=[]; if((s.position==='sticky'||s.position==='-webkit-sticky') && s.top==='0px'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Header uses position:sticky; top:0."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Sticky Header</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <header id='hdr'>Header</header><main style='height:1200px'>Content</main>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#hdr { position: sticky; top: 0; background:#fff; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use position: sticky."
      },
      {
        "level": 2,
        "text": "Also set top: 0."
      },
      {
        "level": 3,
        "text": "#hdr { position: sticky; top: 0; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "webkit",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Sticky Header</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <header id='hdr'>Header</header><main style='height:1200px'>Content</main>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#hdr { position: -webkit-sticky; position: sticky; top:0; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn sticky header - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-025",
    "title": "Modal Overlay",
    "description": "Ensure the modal overlays content using position and z-index.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Modal Overlay</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='main' class='main'>Main</div><div id='modal' class='modal'>Modal</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Modal overlay */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const m=getComputedStyle(document.querySelector('#modal')); const p=[],f=[]; if(m.position==='fixed' && parseInt(m.zIndex)>=1000){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Modal has fixed positioning and high z-index."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Modal Overlay</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='main' class='main'>Main</div><div id='modal' class='modal'>Modal</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#modal { position: fixed; top:0; left:0; right:0; z-index:1000; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use position:fixed and a high z-index."
      },
      {
        "level": 2,
        "text": "1000 is a common overlay index."
      },
      {
        "level": 3,
        "text": "#modal { position:fixed; z-index:1000; top:0; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "absolute",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Modal Overlay</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='main' class='main'>Main</div><div id='modal' class='modal'>Modal</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#modal { position: absolute; top:0; left:0; right:0; z-index:9999; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn modal overlay - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-026",
    "title": "CSS Variable for Primary Color",
    "description": "Define --primary in :root as #3498db and use it for the h1 color.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>CSS Variable for Primary Color</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1 id='t'>Title</h1>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Use CSS var */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#t')); const p=[],f=[]; if(s.color==='rgb(52, 152, 219)'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "h1 color resolves to #3498db."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>CSS Variable for Primary Color</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1 id='t'>Title</h1>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": ":root{--primary:#3498db;} h1#t{color:var(--primary);} \n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Declare :root { --primary: #3498db; }"
      },
      {
        "level": 2,
        "text": "Use color: var(--primary)."
      },
      {
        "level": 3,
        "text": ":root{--primary:#3498db;} h1#t{color:var(--primary);}"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "fallback",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>CSS Variable for Primary Color</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1 id='t'>Title</h1>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": ":root{--primary:#3498db;} h1#t{color:var(--primary, #3498db);} \n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn css variable for primary color - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-027",
    "title": "nth-child Even Rows",
    "description": "Style every even list item green using :nth-child(even).",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>nth-child Even Rows</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ul id='list'><li>1</li><li>2</li><li>3</li><li>4</li></ul>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Style even lis */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const li=document.querySelectorAll('#list li'); const p=[],f=[]; const s=getComputedStyle(li[1]); if(s.color==='rgb(0, 128, 0)'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Second li is green."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>nth-child Even Rows</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ul id='list'><li>1</li><li>2</li><li>3</li><li>4</li></ul>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#list li:nth-child(even){ color: green; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use :nth-child(even)."
      },
      {
        "level": 2,
        "text": "Target #list li:nth-child(even)."
      },
      {
        "level": 3,
        "text": "#list li:nth-child(even){ color: green; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "odd-exclude",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>nth-child Even Rows</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ul id='list'><li>1</li><li>2</li><li>3</li><li>4</li></ul>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#list li{ color: inherit; } #list li:nth-child(2n){ color: green; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn nth-child even rows - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-028",
    "title": "Uppercase Buttons",
    "description": "Transform button text to uppercase.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Uppercase Buttons</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button class='btn' id='btn3'>press</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Uppercase .btn */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#btn3')); const p=[],f=[]; if((s.textTransform||'').toLowerCase()==='uppercase'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "text-transform is uppercase."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Uppercase Buttons</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button class='btn' id='btn3'>press</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": ".btn { text-transform: uppercase; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use text-transform."
      },
      {
        "level": 2,
        "text": "Target .btn."
      },
      {
        "level": 3,
        "text": ".btn { text-transform: uppercase; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "inline",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Uppercase Buttons</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button class='btn' id='btn3' style='text-transform:uppercase'>press</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn uppercase buttons - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-029",
    "title": "Comfortable Paragraphs",
    "description": "Set paragraph line-height to 1.5.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Comfortable Paragraphs</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p id='lp'>Lorem text</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Set line-height */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#lp')); const p=[],f=[]; if(parseFloat(s.lineHeight)>=1.5*parseFloat(s.fontSize)-0.5){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "line-height roughly >= 1.5em."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Comfortable Paragraphs</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p id='lp'>Lorem text</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#lp { line-height: 1.5; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use line-height."
      },
      {
        "level": 2,
        "text": "Relative unit is fine."
      },
      {
        "level": 3,
        "text": "#lp { line-height: 1.5; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "em",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Comfortable Paragraphs</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p id='lp'>Lorem text</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#lp { line-height: 1.5em; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn comfortable paragraphs - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-030",
    "title": "Rounded Buttons",
    "description": "Give the button rounded corners (>=8px).",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Rounded Buttons</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='rbtn'>Go</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Rounded button */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#rbtn')); const p=[],f=[]; if(parseInt(s.borderRadius)>=8){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "border-radius is at least 8px."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Rounded Buttons</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='rbtn'>Go</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#rbtn { border-radius: 8px; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use border-radius."
      },
      {
        "level": 2,
        "text": "Any value >=8px passes."
      },
      {
        "level": 3,
        "text": "#rbtn { border-radius: 8px; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "percent",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Rounded Buttons</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='rbtn'>Go</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#rbtn { border-radius: 0.5rem; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn rounded buttons - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-031",
    "title": "Hero Background Image",
    "description": "Set a background image 'hero.jpg' on the hero section.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Hero Background Image</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <section id='hero'>Hero</section>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Background image */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#hero')); const p=[],f=[]; if((s.backgroundImage||'').includes('hero.jpg')){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "background-image references hero.jpg."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Hero Background Image</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <section id='hero'>Hero</section>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#hero { background-image: url('hero.jpg'); }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use background-image: url('hero.jpg')."
      },
      {
        "level": 2,
        "text": "Target #hero."
      },
      {
        "level": 3,
        "text": "#hero { background-image: url('hero.jpg'); }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "shorthand",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Hero Background Image</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <section id='hero'>Hero</section>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#hero { background: url('hero.jpg') center/cover no-repeat; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn hero background image - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-032",
    "title": "Letter Spacing",
    "description": "Set letter-spacing of the h2 to 2px.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Letter Spacing</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h2 id='h2'>Spacing</h2>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Letter spacing */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#h2')); const p=[],f=[]; if(s.letterSpacing==='2px'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "letter-spacing is 2px."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Letter Spacing</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h2 id='h2'>Spacing</h2>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#h2 { letter-spacing: 2px; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use letter-spacing."
      },
      {
        "level": 2,
        "text": "Target #h2."
      },
      {
        "level": 3,
        "text": "#h2 { letter-spacing: 2px; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "em",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Letter Spacing</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h2 id='h2'>Spacing</h2>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#h2 { letter-spacing: 0.125em; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn letter spacing - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-033",
    "title": "Text Shadow",
    "description": "Apply any non-none text-shadow to the h3.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Text Shadow</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h3 id='ts'>Shadow</h3>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Text shadow */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#ts')); const p=[],f=[]; if((s.textShadow||'')!=='none' && s.textShadow!==''){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "text-shadow applied."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Text Shadow</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h3 id='ts'>Shadow</h3>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#ts { text-shadow: 1px 1px 2px rgba(0,0,0,.3); }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use text-shadow."
      },
      {
        "level": 2,
        "text": "Any non-none value passes."
      },
      {
        "level": 3,
        "text": "#ts { text-shadow: 1px 1px 2px rgba(0,0,0,.3); }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "glow",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Text Shadow</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h3 id='ts'>Shadow</h3>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#ts { text-shadow: 0 0 6px rgba(0,0,0,.5); }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn text shadow - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-034",
    "title": "Border-Box Sizing",
    "description": "Set box-sizing to border-box for the element.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Border-Box Sizing</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='bb'>Box</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* box-sizing */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#bb')); const p=[],f=[]; if(s.boxSizing==='border-box'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "box-sizing is border-box."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Border-Box Sizing</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='bb'>Box</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#bb { box-sizing: border-box; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use box-sizing property."
      },
      {
        "level": 2,
        "text": "Target #bb."
      },
      {
        "level": 3,
        "text": "#bb { box-sizing: border-box; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "global",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Border-Box Sizing</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='bb'>Box</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "*, *::before, *::after { box-sizing: border-box; }\n#bb { padding:10px; border:5px solid #000; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn border-box sizing - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-035",
    "title": "Constrain Container Width",
    "description": "Limit the container's max-width to 800px.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Constrain Container Width</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='container'>Content</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* max-width */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#container')); const p=[],f=[]; if(s.maxWidth==='800px'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "max-width is 800px."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Constrain Container Width</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='container'>Content</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#container { max-width: 800px; margin: 0 auto; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use max-width."
      },
      {
        "level": 2,
        "text": "Target #container."
      },
      {
        "level": 3,
        "text": "#container { max-width: 800px; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "clamp",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Constrain Container Width</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='container'>Content</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#container { width: min(100%, 800px); margin: 0 auto; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn constrain container width - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-036",
    "title": "Scrollable Box",
    "description": "Make the box scroll vertically.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Scrollable Box</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='scroll' style='height:100px'>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Scrollable */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#scroll')); const p=[],f=[]; if(s.overflowY==='scroll' || s.overflow==='scroll'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "overflow-y set to scroll."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Scrollable Box</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='scroll' style='height:100px'>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#scroll { overflow-y: scroll; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use overflow-y: scroll."
      },
      {
        "level": 2,
        "text": "Target #scroll."
      },
      {
        "level": 3,
        "text": "#scroll { overflow-y: scroll; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "both",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Scrollable Box</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='scroll' style='height:100px'>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br>Line<br></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#scroll { overflow: auto; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn scrollable box - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-037",
    "title": "Zebra Table Rows",
    "description": "Give even table rows a light gray background (#f0f0f0).",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Zebra Table Rows</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <table id='tb'><tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Zebra rows */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const row=document.querySelectorAll('#tb tr')[1]; const s=getComputedStyle(row); const p=[],f=[]; if(s.backgroundColor==='rgb(240, 240, 240)'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Even row has #f0f0f0 background."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Zebra Table Rows</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <table id='tb'><tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#tb tr:nth-child(even){ background:#f0f0f0; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use tr:nth-child(even)."
      },
      {
        "level": 2,
        "text": "Target #tb tr:nth-child(even)."
      },
      {
        "level": 3,
        "text": "#tb tr:nth-child(even){ background:#f0f0f0; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "odd-alt",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Zebra Table Rows</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <table id='tb'><tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#tb tr:nth-child(2n){ background:#f0f0f0; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn zebra table rows - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-038",
    "title": "Disabled Inputs Look Dim",
    "description": "Dim disabled inputs using opacity 0.5.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Disabled Inputs Look Dim</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='di' disabled value='x'>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Dim disabled inputs */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#di')); const p=[],f=[]; if(s.opacity==='0.5'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "opacity is 0.5 on disabled input."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Disabled Inputs Look Dim</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='di' disabled value='x'>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "input:disabled { opacity: .5; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use :disabled selector."
      },
      {
        "level": 2,
        "text": "Set opacity to 0.5."
      },
      {
        "level": 3,
        "text": "input:disabled { opacity: .5; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "bg",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Disabled Inputs Look Dim</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='di' disabled value='x'>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "input:disabled { background:#eee; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn disabled inputs look dim - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-039",
    "title": "Rotate Element",
    "description": "Rotate the element by any angle using transform.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Rotate Element</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='rot'>Rotate me</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Rotate #rot */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#rot')); const p=[],f=[]; if((s.transform||'none')!=='none'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "Transform is not none."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Rotate Element</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='rot'>Rotate me</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#rot { display:inline-block; transform: rotate(15deg); }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use transform: rotate(...)."
      },
      {
        "level": 2,
        "text": "Any angle passes."
      },
      {
        "level": 3,
        "text": "#rot { transform: rotate(15deg); }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "rad",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Rotate Element</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='rot'>Rotate me</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#rot { display:inline-block; transform: rotate(0.2rad); }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn rotate element - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "css-040",
    "title": "Dotted Separator",
    "description": "Make the horizontal rule a dotted line.",
    "difficulty": 2,
    "category": "css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Dotted Separator</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <hr id='sep'>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Dotted rule */\n",
      "script.js": "// No JS\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#sep')); const p=[],f=[]; if(s.borderTopStyle==='dotted'){p.push('a01')}else{f.push('a01')} return {passedIds:p, failedIds:f, passed:f.length===0};",
        "label": "border-top-style dotted on hr."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Dotted Separator</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <hr id='sep'>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#sep { border: 0; border-top: 2px dotted #333; }\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Style the hr border."
      },
      {
        "level": 2,
        "text": "Use dotted border-top."
      },
      {
        "level": 3,
        "text": "#sep { border-top: 2px dotted #333; }"
      }
    ],
    "alternativeSolutions": [
      {
        "label": "border",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Dotted Separator</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <hr id='sep'>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#sep { border: 2px dotted #333; border-left:0; border-right:0; border-bottom:0; }\n",
          "script.js": "// Not used\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Learn dotted separator - a fundamental CSS concept used in modern web design."
  },
  {
    "id": "js-001",
    "title": "Sum Array",
    "description": "Return the sum of a numeric array.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Sum Array</title>\n</head>\n<body>\n  <h1>Sum Array</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction sumArray(arr) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.sumArray = sumArray;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; try{ if(window.sumArray([1,2,3,4])===10) p.push('a1'); if(window.sumArray([])===0) p.push('a2'); if(window.sumArray([-2,2])===0) p.push('a3'); }catch(e){f.push('err');} return {passedIds:p, failedIds:f, passed:f.length===0 && p.length===3};",
        "label": "Return the sum of a numeric array."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Sum Array</title>\n</head>\n<body>\n  <h1>Sum Array</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function sumArray(arr){return arr.reduce((a,b)=>a+b,0);} window.sumArray=sumArray;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use Array.prototype.reduce."
      },
      {
        "level": 2,
        "text": "Initialize accumulator to 0."
      },
      {
        "level": 3,
        "text": "Avoid floating point surprises by not coercing to strings."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Sum Array</title>\n</head>\n<body>\n  <h1>Sum Array</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function sumArray(arr){let s=0; for(const n of arr) s+=n; return s;} window.sumArray=sumArray;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-002",
    "title": "Factorial",
    "description": "Compute n! for n>=0.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Factorial</title>\n</head>\n<body>\n  <h1>Factorial</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction factorial(n) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.factorial = factorial;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; const fn=window.factorial; if(fn(0)===1)p.push('a1'); if(fn(5)===120)p.push('a2'); if(fn(10)===3628800)p.push('a3'); return {passedIds:p, failedIds:f, passed:p.length===3};",
        "label": "Compute n! for n>=0."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Factorial</title>\n</head>\n<body>\n  <h1>Factorial</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function factorial(n){let x=1; for(let i=2;i<=n;i++) x*=i; return x;} window.factorial=factorial;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Iterative solutions avoid recursion limits."
      },
      {
        "level": 2,
        "text": "Base case: 0! = 1."
      },
      {
        "level": 3,
        "text": "Multiply 1..n."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Factorial</title>\n</head>\n<body>\n  <h1>Factorial</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function factorial(n){ if(n===0) return 1; return n*factorial(n-1);} window.factorial=factorial;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-003",
    "title": "Palindrome (alphanumeric)",
    "description": "Return true if a string reads the same backward, ignoring non-alphanumerics and case.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Palindrome (alphanumeric)</title>\n</head>\n<body>\n  <h1>Palindrome (alphanumeric)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction isPalindrome(s) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.isPalindrome = isPalindrome;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; const fn=window.isPalindrome; if(fn('Race car!'))p.push('a1'); if(!fn('hello'))p.push('a2'); if(fn('A man, a plan, a canal: Panama'))p.push('a3'); return {passedIds:p, failedIds:f, passed:p.length===3};",
        "label": "Return true if a string reads the same backward, ignoring non-alphanumerics and case."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Palindrome (alphanumeric)</title>\n</head>\n<body>\n  <h1>Palindrome (alphanumeric)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function isPalindrome(s){ s=s.toLowerCase().replace(/[^a-z0-9]/g,''); return s===s.split('').reverse().join(''); } window.isPalindrome=isPalindrome;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Normalize the string: lowercase and strip non-alphanumerics."
      },
      {
        "level": 2,
        "text": "Compare to its reverse."
      },
      {
        "level": 3,
        "text": "Two-pointer scan avoids building a full reverse."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Palindrome (alphanumeric)</title>\n</head>\n<body>\n  <h1>Palindrome (alphanumeric)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function isPalindrome(s){ s=s.toLowerCase(); let i=0,j=s.length-1; const isA=(c)=>/[a-z0-9]/.test(c); while(i<j){ while(i<j&&!isA(s[i])) i++; while(i<j&&!isA(s[j])) j--; if(s[i++]!==s[j--]) return false; } return true;} window.isPalindrome=isPalindrome;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-004",
    "title": "FizzBuzz",
    "description": "Return an array 1..n with 'Fizz','Buzz','FizzBuzz' substitutions.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>FizzBuzz</title>\n</head>\n<body>\n  <h1>FizzBuzz</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction fizzbuzz(n) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.fizzbuzz = fizzbuzz;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const a=window.fizzbuzz(20); const p=[],f=[]; if(a[2]==='Fizz')p.push('a1'); if(a[4]==='Buzz')p.push('a2'); if(a[14]==='FizzBuzz')p.push('a3'); return {passedIds:p, failedIds:f, passed:p.length===3};",
        "label": "Return an array 1..n with 'Fizz','Buzz','FizzBuzz' substitutions."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>FizzBuzz</title>\n</head>\n<body>\n  <h1>FizzBuzz</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function fizzbuzz(n){const out=[]; for(let i=1;i<=n;i++){let s=''; if(i%3===0)s+='Fizz'; if(i%5===0)s+='Buzz'; out.push(s||i);} return out;} window.fizzbuzz=fizzbuzz;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use modulo 3 and 5."
      },
      {
        "level": 2,
        "text": "Join strings when both match."
      },
      {
        "level": 3,
        "text": "Default to the number."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>FizzBuzz</title>\n</head>\n<body>\n  <h1>FizzBuzz</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function fizzbuzz(n){return Array.from({length:n},(_,k)=>{const i=k+1; return i%15===0?'FizzBuzz':i%3===0?'Fizz':i%5===0?'Buzz':i;});} window.fizzbuzz=fizzbuzz;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-005",
    "title": "Reverse Words",
    "description": "Reverse the order of words in a sentence.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Reverse Words</title>\n</head>\n<body>\n  <h1>Reverse Words</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction reverseWords(s) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.reverseWords = reverseWords;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; const fn=window.reverseWords; if(fn('a b c')==='c b a')p.push('a1'); if(fn('hello world')==='world hello')p.push('a2'); return {passedIds:p, failedIds:f, passed:p.length===2};",
        "label": "Reverse the order of words in a sentence."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Reverse Words</title>\n</head>\n<body>\n  <h1>Reverse Words</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function reverseWords(s){return s.trim().split(/\\s+/).reverse().join(' ');} window.reverseWords=reverseWords;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Split on whitespace."
      },
      {
        "level": 2,
        "text": "Reverse, then join."
      },
      {
        "level": 3,
        "text": "Preserve single spaces is fine for this task."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Reverse Words</title>\n</head>\n<body>\n  <h1>Reverse Words</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function reverseWords(s){const arr=s.trim().split(/\\s+/); let i=0,j=arr.length-1; while(i<j){ [arr[i],arr[j]]=[arr[j],arr[i]]; i++; j--; } return arr.join(' ');} window.reverseWords=reverseWords;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-006",
    "title": "Unique Elements",
    "description": "Return a new array containing unique elements in original order.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Unique Elements</title>\n</head>\n<body>\n  <h1>Unique Elements</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction unique(arr) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.unique = unique;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const out=window.unique([1,1,2,3,3]); const p=[],f=[]; if(JSON.stringify(out)===JSON.stringify([1,2,3]))p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "Return a new array containing unique elements in original order."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Unique Elements</title>\n</head>\n<body>\n  <h1>Unique Elements</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function unique(arr){const seen=new Set(),res=[]; for(const x of arr){ if(!seen.has(x)){ seen.add(x); res.push(x); } } return res;} window.unique=unique;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use Set to track seen."
      },
      {
        "level": 2,
        "text": "Only push if not seen."
      },
      {
        "level": 3,
        "text": "Maintain order."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Unique Elements</title>\n</head>\n<body>\n  <h1>Unique Elements</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function unique(arr){return [...new Set(arr)];} window.unique=unique;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-007",
    "title": "Count Vowels",
    "description": "Count vowels (a, e, i, o, u) case-insensitive.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Count Vowels</title>\n</head>\n<body>\n  <h1>Count Vowels</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction countVowels(s) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.countVowels = countVowels;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const fn=window.countVowels; const p=[],f=[]; if(fn('Hello')===2)p.push('a1'); if(fn('AEIOU')===5)p.push('a2'); return {passedIds:p, failedIds:f, passed:p.length===2};",
        "label": "Count vowels (a, e, i, o, u) case-insensitive."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Count Vowels</title>\n</head>\n<body>\n  <h1>Count Vowels</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function countVowels(s){s=s.toLowerCase(); let c=0; for(const ch of s) if('aeiou'.includes(ch)) c++; return c;} window.countVowels=countVowels;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Lowercase the string."
      },
      {
        "level": 2,
        "text": "Check membership in a vowel set."
      },
      {
        "level": 3,
        "text": "Regex works too."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Count Vowels</title>\n</head>\n<body>\n  <h1>Count Vowels</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function countVowels(s){return (s.match(/[aeiou]/gi)||[]).length;} window.countVowels=countVowels;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-008",
    "title": "Anagram Check",
    "description": "Return true if two strings are anagrams (ignore case, spaces).",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Anagram Check</title>\n</head>\n<body>\n  <h1>Anagram Check</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction isAnagram(a,b) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.isAnagram = isAnagram;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const fn=window.isAnagram; const p=[],f=[]; if(fn('listen','silent'))p.push('a1'); if(fn('rail safety','fairy tales'))p.push('a2'); if(!fn('rat','car'))p.push('a3'); return {passedIds:p, failedIds:f, passed:p.length===3};",
        "label": "Return true if two strings are anagrams (ignore case, spaces)."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Anagram Check</title>\n</head>\n<body>\n  <h1>Anagram Check</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function isAnagram(a,b){ const norm=s=>s.toLowerCase().replace(/\\s+/g,'').split('').sort().join(''); return norm(a)===norm(b);} window.isAnagram=isAnagram;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Normalize: lowercase, strip spaces."
      },
      {
        "level": 2,
        "text": "Sort and compare."
      },
      {
        "level": 3,
        "text": "Or use a frequency map."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Anagram Check</title>\n</head>\n<body>\n  <h1>Anagram Check</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function isAnagram(a,b){ a=a.toLowerCase().replace(/\\s+/g,''); b=b.toLowerCase().replace(/\\s+/g,''); const m=new Map(); for(const c of a) m.set(c,(m.get(c)||0)+1); for(const c of b){ if(!m.has(c)) return false; const t=m.get(c)-1; if(t) m.set(c,t); else m.delete(c);} return m.size===0;} window.isAnagram=isAnagram;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-009",
    "title": "Two Sum Indices",
    "description": "Return indices [i,j] with nums[i]+nums[j]==target (exactly one solution).",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Two Sum Indices</title>\n</head>\n<body>\n  <h1>Two Sum Indices</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction twoSum(nums,target) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.twoSum = twoSum;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const out=window.twoSum([2,7,11,15],9); const p=[],f=[]; if(Array.isArray(out)&&out[0]===0&&out[1]===1)p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "Return indices [i,j] with nums[i]+nums[j]==target (exactly one solution)."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Two Sum Indices</title>\n</head>\n<body>\n  <h1>Two Sum Indices</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function twoSum(nums,target){const map=new Map(); for(let i=0;i<nums.length;i++){const c=target-nums[i]; if(map.has(c)) return [map.get(c), i]; map.set(nums[i], i);} } window.twoSum=twoSum;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Hash map from value to index."
      },
      {
        "level": 2,
        "text": "Lookup complement each step."
      },
      {
        "level": 3,
        "text": "Return indices once found."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Two Sum Indices</title>\n</head>\n<body>\n  <h1>Two Sum Indices</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function twoSum(nums,target){for(let i=0;i<nums.length;i++){for(let j=i+1;j<nums.length;j++){if(nums[i]+nums[j]===target) return [i,j];}}} window.twoSum=twoSum;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-010",
    "title": "Flatten One Level",
    "description": "Flatten a 1-level nested array.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Flatten One Level</title>\n</head>\n<body>\n  <h1>Flatten One Level</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction flatten1(arr) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.flatten1 = flatten1;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const out=window.flatten1([1,[2,3],[4]]); const p=[],f=[]; if(JSON.stringify(out)===JSON.stringify([1,2,3,4]))p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "Flatten a 1-level nested array."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Flatten One Level</title>\n</head>\n<body>\n  <h1>Flatten One Level</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function flatten1(arr){return arr.flat(1);} window.flatten1=flatten1;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use flat(1)."
      },
      {
        "level": 2,
        "text": "Or loop and spread inner arrays."
      },
      {
        "level": 3,
        "text": "Don't deep-flatten."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Flatten One Level</title>\n</head>\n<body>\n  <h1>Flatten One Level</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function flatten1(arr){const res=[]; for(const x of arr){ if(Array.isArray(x)) res.push(...x); else res.push(x);} return res;} window.flatten1=flatten1;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-011",
    "title": "Clamp Number",
    "description": "Clamp n into [min,max].",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Clamp Number</title>\n</head>\n<body>\n  <h1>Clamp Number</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction clamp(n, min, max) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.clamp = clamp;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const fn=window.clamp; const p=[],f=[]; if(fn(5,0,10)===5)p.push('a1'); if(fn(-3,0,10)===0)push='x'; if(fn(22,0,10)===10)p.push('a3'); return {passedIds:p, failedIds:f, passed:p.length===2 || p.length===3};",
        "label": "Clamp n into [min,max]."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Clamp Number</title>\n</head>\n<body>\n  <h1>Clamp Number</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function clamp(n,min,max){return Math.min(max, Math.max(min,n));} window.clamp=clamp;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use Math.min/Math.max."
      },
      {
        "level": 2,
        "text": "Order matters: max(min,n)."
      },
      {
        "level": 3,
        "text": "Return the result."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Clamp Number</title>\n</head>\n<body>\n  <h1>Clamp Number</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function clamp(n,min,max){ if(n<min) return min; if(n>max) return max; return n;} window.clamp=clamp;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-012",
    "title": "Chunk Array",
    "description": "Split an array into chunks of size k (last chunk may be smaller).",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Chunk Array</title>\n</head>\n<body>\n  <h1>Chunk Array</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction chunk(arr,k) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.chunk = chunk;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const out=window.chunk([1,2,3,4,5],2); const p=[],f=[]; if(JSON.stringify(out)===JSON.stringify([[1,2],[3,4],[5]]))p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "Split an array into chunks of size k (last chunk may be smaller)."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Chunk Array</title>\n</head>\n<body>\n  <h1>Chunk Array</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function chunk(arr,k){const res=[]; for(let i=0;i<arr.length;i+=k){res.push(arr.slice(i,i+k));} return res;} window.chunk=chunk;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Loop by step k."
      },
      {
        "level": 2,
        "text": "Use slice(i,i+k)."
      },
      {
        "level": 3,
        "text": "Collect into result."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Chunk Array</title>\n</head>\n<body>\n  <h1>Chunk Array</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function chunk(arr,k){const res=[], tmp=[]; for(const x of arr){ tmp.push(x); if(tmp.length===k){res.push(tmp.slice()); tmp.length=0;} } if(tmp.length) res.push(tmp); return res;} window.chunk=chunk;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-013",
    "title": "Shallow Equal Objects",
    "description": "Return true if two plain objects have same keys and values (shallow).",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Shallow Equal Objects</title>\n</head>\n<body>\n  <h1>Shallow Equal Objects</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction shallowEqual(a,b) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.shallowEqual = shallowEqual;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const fn=window.shallowEqual; const p=[],f=[]; if(fn({x:1,y:2},{x:1,y:2}))p.push('a1'); if(!fn({x:1},{x:2}))p.push('a2'); return {passedIds:p, failedIds:f, passed:p.length===2};",
        "label": "Return true if two plain objects have same keys and values (shallow)."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Shallow Equal Objects</title>\n</head>\n<body>\n  <h1>Shallow Equal Objects</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function shallowEqual(a,b){const ka=Object.keys(a), kb=Object.keys(b); if(ka.length!==kb.length) return false; for(const k of ka){ if(a[k]!==b[k]) return false;} return true;} window.shallowEqual=shallowEqual;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Compare keys length."
      },
      {
        "level": 2,
        "text": "Check every key equality."
      },
      {
        "level": 3,
        "text": "Ignore prototype differences."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Shallow Equal Objects</title>\n</head>\n<body>\n  <h1>Shallow Equal Objects</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function shallowEqual(a,b){for(const k in a){ if(!(k in b)||a[k]!==b[k]) return false;} for(const k in b){ if(!(k in a)) return false;} return true;} window.shallowEqual=shallowEqual;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-014",
    "title": "Rotate Array Right",
    "description": "Rotate array right by k steps (non-destructive).",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Rotate Array Right</title>\n</head>\n<body>\n  <h1>Rotate Array Right</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction rotateRight(arr,k) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.rotateRight = rotateRight;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const out=window.rotateRight([1,2,3,4,5],2); const p=[],f=[]; if(JSON.stringify(out)===JSON.stringify([4,5,1,2,3]))p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "Rotate array right by k steps (non-destructive)."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Rotate Array Right</title>\n</head>\n<body>\n  <h1>Rotate Array Right</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function rotateRight(arr,k){const n=arr.length; k%=n; return arr.slice(n-k).concat(arr.slice(0,n-k));} window.rotateRight=rotateRight;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use modulo by length."
      },
      {
        "level": 2,
        "text": "Slice tail then head."
      },
      {
        "level": 3,
        "text": "Don't mutate input."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Rotate Array Right</title>\n</head>\n<body>\n  <h1>Rotate Array Right</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function rotateRight(arr,k){const a=arr.slice(); for(let i=0;i<k%a.length;i++){a.unshift(a.pop());} return a;} window.rotateRight=rotateRight;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-015",
    "title": "Range Generator",
    "description": "Return [start, start+step, ...] up to end (inclusive if exact).",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Range Generator</title>\n</head>\n<body>\n  <h1>Range Generator</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction range(start,end,step=1) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.range = range;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; const r1=window.range(1,5); const r2=window.range(0,6,2); if(JSON.stringify(r1)==='[1,2,3,4,5]')p.push('a1'); if(JSON.stringify(r2)==='[0,2,4,6]')p.push('a2'); return {passedIds:p, failedIds:f, passed:p.length===2};",
        "label": "Return [start, start+step, ...] up to end (inclusive if exact)."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Range Generator</title>\n</head>\n<body>\n  <h1>Range Generator</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function range(start,end,step=1){const out=[]; for(let x=start; x<=end; x+=step) out.push(x); return out;} window.range=range;"
    },
    "hints": [
      {
        "level": 1,
        "text": "for-loop accumulating values."
      },
      {
        "level": 2,
        "text": "Handle custom step."
      },
      {
        "level": 3,
        "text": "Include end when divisible."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Range Generator</title>\n</head>\n<body>\n  <h1>Range Generator</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function range(start,end,step=1){return Array.from({length: Math.floor((end-start)/step)+1},(_,i)=>start+i*step);} window.range=range;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-016",
    "title": "Median",
    "description": "Return median of numeric array.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Median</title>\n</head>\n<body>\n  <h1>Median</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction median(arr) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.median = median;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const fn=window.median; const p=[],f=[]; if(fn([3,1,2])===2)p.push('a1'); if(fn([1,2,3,4])===2.5)p.push('a2'); return {passedIds:p, failedIds:f, passed:p.length===2};",
        "label": "Return median of numeric array."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Median</title>\n</head>\n<body>\n  <h1>Median</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function median(arr){const a=arr.slice().sort((x,y)=>x-y); const n=a.length; return n%2? a[(n-1)/2] : (a[n/2-1]+a[n/2])/2;} window.median=median;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Sort a copy ascending."
      },
      {
        "level": 2,
        "text": "If odd: middle element."
      },
      {
        "level": 3,
        "text": "If even: average two middles."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Median</title>\n</head>\n<body>\n  <h1>Median</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function median(arr){const a=[...arr].sort((x,y)=>x-y); const n=a.length; if(n&1) return a[(n>>1)]; return (a[n/2-1]+a[n/2])/2;} window.median=median;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-017",
    "title": "Prime Check",
    "description": "Return true if n is prime (n>=2).",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Prime Check</title>\n</head>\n<body>\n  <h1>Prime Check</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction isPrime(n) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.isPrime = isPrime;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const fn=window.isPrime; const p=[],f=[]; if(fn(2)&&fn(13)&&!fn(1)&&!fn(21))p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "Return true if n is prime (n>=2)."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Prime Check</title>\n</head>\n<body>\n  <h1>Prime Check</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function isPrime(n){ if(n<2) return false; for(let d=2; d*d<=n; d++){ if(n%d===0) return false;} return true;} window.isPrime=isPrime;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Early-return for n<2."
      },
      {
        "level": 2,
        "text": "Test divisors up to sqrt(n)."
      },
      {
        "level": 3,
        "text": "Skip even divisors after 2."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Prime Check</title>\n</head>\n<body>\n  <h1>Prime Check</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function isPrime(n){ if(n<2) return false; if(n%2===0) return n===2; for(let d=3; d*d<=n; d+=2) if(n%d===0) return false; return true;} window.isPrime=isPrime;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-018",
    "title": "Nth Fibonacci",
    "description": "Return nth Fibonacci (0-indexed).",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Nth Fibonacci</title>\n</head>\n<body>\n  <h1>Nth Fibonacci</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction fib(n) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.fib = fib;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const fn=window.fib; const p=[],f=[]; if(fn(0)===0 && fn(1)===1 && fn(7)===13) p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "Return nth Fibonacci (0-indexed)."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Nth Fibonacci</title>\n</head>\n<body>\n  <h1>Nth Fibonacci</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function fib(n){ let a=0,b=1; while(n--){ [a,b]=[b,a+b]; } return a;} window.fib=fib;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Iterative approach is efficient."
      },
      {
        "level": 2,
        "text": "Track two variables."
      },
      {
        "level": 3,
        "text": "Avoid exponential recursion."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Nth Fibonacci</title>\n</head>\n<body>\n  <h1>Nth Fibonacci</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function fib(n,memo={}){ if(n in memo) return memo[n]; if(n<2) return n; return memo[n]=fib(n-1,memo)+fib(n-2,memo);} window.fib=fib;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-019",
    "title": "Balanced Brackets",
    "description": "Return true if (), [], {} are balanced.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Balanced Brackets</title>\n</head>\n<body>\n  <h1>Balanced Brackets</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction balanced(s) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.balanced = balanced;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const fn=window.balanced; const p=[],f=[]; if(fn('([])'))p.push('a1'); if(!fn('([)]'))p.push('a2'); if(fn('{[()]}'))p.push('a3'); return {passedIds:p, failedIds:f, passed:p.length===3};",
        "label": "Return true if (), [], {} are balanced."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Balanced Brackets</title>\n</head>\n<body>\n  <h1>Balanced Brackets</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function balanced(s){const map={')':'(',']':'[','}':'{'}; const st=[]; for(const ch of s){ if(map[ch]){ if(st.pop()!==map[ch]) return false;} else if('([{'.includes(ch)) st.push(ch);} return st.length===0;} window.balanced=balanced;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use a stack."
      },
      {
        "level": 2,
        "text": "Map closing to opening."
      },
      {
        "level": 3,
        "text": "Validate and ensure stack empty at end."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Balanced Brackets</title>\n</head>\n<body>\n  <h1>Balanced Brackets</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function balanced(s){const st=[]; for(const ch of s){ if('([{'.includes(ch)) st.push(ch); else if(')]}'.includes(ch)){ const t=st.pop(); if((ch===')'&&t!=='(')||(ch===']'&&t!=='[')||(ch==='}'&&t!=='{')) return false;} } return st.length===0;} window.balanced=balanced;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-020",
    "title": "Map Object Values",
    "description": "Apply f to each value of obj; return new object.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Map Object Values</title>\n</head>\n<body>\n  <h1>Map Object Values</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction mapValues(obj,f) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.mapValues = mapValues;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const out=window.mapValues({a:1,b:2},x=>x*2); const p=[],f=[]; if(out.a===2 && out.b===4) p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "Apply f to each value of obj; return new object."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Map Object Values</title>\n</head>\n<body>\n  <h1>Map Object Values</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function mapValues(obj,f){const res={}; for(const k of Object.keys(obj)) res[k]=f(obj[k]); return res;} window.mapValues=mapValues;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Don't mutate input."
      },
      {
        "level": 2,
        "text": "Loop keys or use Object.entries."
      },
      {
        "level": 3,
        "text": "Construct a new object."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Map Object Values</title>\n</head>\n<body>\n  <h1>Map Object Values</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function mapValues(obj,f){return Object.fromEntries(Object.entries(obj).map(([k,v])=>[k,f(v)]));} window.mapValues=mapValues;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-021",
    "title": "Deep Clone (JSON-safe)",
    "description": "Deep clone a JSON-serializable value.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Deep Clone (JSON-safe)</title>\n</head>\n<body>\n  <h1>Deep Clone (JSON-safe)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction deepClone(v) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.deepClone = deepClone;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const fn=window.deepClone; const o={a:1,b:{c:2}}, c=fn(o); const p=[],f=[]; if(JSON.stringify(c)===JSON.stringify(o) && c!==o && c.b!==o.b) p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "Deep clone a JSON-serializable value."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Deep Clone (JSON-safe)</title>\n</head>\n<body>\n  <h1>Deep Clone (JSON-safe)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function deepClone(v){return JSON.parse(JSON.stringify(v));} window.deepClone=deepClone;"
    },
    "hints": [
      {
        "level": 1,
        "text": "JSON parse/stringify works for JSON-safe values."
      },
      {
        "level": 2,
        "text": "No functions/undefined/symbols expected."
      },
      {
        "level": 3,
        "text": "Ensure new references for nested objects."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Deep Clone (JSON-safe)</title>\n</head>\n<body>\n  <h1>Deep Clone (JSON-safe)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function deepClone(v){ if(v===null || typeof v!=='object') return v; if(Array.isArray(v)) return v.map(deepClone); const out={}; for(const k in v) out[k]=deepClone(v[k]); return out;} window.deepClone=deepClone;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-022",
    "title": "Group By",
    "description": "Group array items by key function f; return {key: items}.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Group By</title>\n</head>\n<body>\n  <h1>Group By</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction groupBy(arr,f) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.groupBy = groupBy;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const out=window.groupBy(['ant','bat','bear'], x=>x[0]); const p=[],f=[]; if(JSON.stringify(out)==='{\"a\":[\"ant\"],\"b\":[\"bat\",\"bear\"]}') p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "Group array items by key function f; return {key: items}."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Group By</title>\n</head>\n<body>\n  <h1>Group By</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function groupBy(arr,f){const res={}; for(const x of arr){ const k=f(x); (res[k]||(res[k]=[])).push(x);} return res;} window.groupBy=groupBy;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Iterate and accumulate into an object."
      },
      {
        "level": 2,
        "text": "Use key = f(item)."
      },
      {
        "level": 3,
        "text": "Initialize arrays as needed."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Group By</title>\n</head>\n<body>\n  <h1>Group By</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function groupBy(arr,f){return arr.reduce((acc,x)=>{const k=f(x); (acc[k]||(acc[k]=[])).push(x); return acc;},{})} window.groupBy=groupBy;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-023",
    "title": "Compose Functions",
    "description": "compose(f,g)(x) returns f(g(x)).",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Compose Functions</title>\n</head>\n<body>\n  <h1>Compose Functions</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction compose(f,g) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.compose = compose;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const fn=window.compose(x=>x+1, x=>x*2); const p=[],f=[]; if(fn(3)===7) p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "compose(f,g)(x) returns f(g(x))."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Compose Functions</title>\n</head>\n<body>\n  <h1>Compose Functions</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function compose(f,g){ return (x)=>f(g(x)); } window.compose=compose;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Return a function that calls g then f."
      },
      {
        "level": 2,
        "text": "Preserve 'this' not needed here."
      },
      {
        "level": 3,
        "text": "Handle arguments if desired (single arg ok)."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Compose Functions</title>\n</head>\n<body>\n  <h1>Compose Functions</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function compose(f,g){ return function(){ return f(g.apply(null, arguments)); } } window.compose=compose;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-024",
    "title": "Memoize (single-arg)",
    "description": "Memoize a single-argument pure function.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Memoize (single-arg)</title>\n</head>\n<body>\n  <h1>Memoize (single-arg)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction memoize(fn) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.memoize = memoize;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; let calls=0; const slow=x=>{calls++; return x*x;}; const m=window.memoize(slow); m(3); m(3); if(calls===1)p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "Memoize a single-argument pure function."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Memoize (single-arg)</title>\n</head>\n<body>\n  <h1>Memoize (single-arg)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function memoize(fn){ const cache=new Map(); return (x)=> cache.has(x)? cache.get(x) : (cache.set(x, fn(x)), cache.get(x)); } window.memoize=memoize;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use a Map from arg to result."
      },
      {
        "level": 2,
        "text": "Return cached value on repeats."
      },
      {
        "level": 3,
        "text": "Assume JSON-serializable simple args."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Memoize (single-arg)</title>\n</head>\n<body>\n  <h1>Memoize (single-arg)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function memoize(fn){ const cache={}; return (x)=> (x in cache)? cache[x] : (cache[x]=fn(x)); } window.memoize=memoize;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-025",
    "title": "Curry (two-arg)",
    "description": "curry(f)(a)(b) == f(a,b).",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Curry (two-arg)</title>\n</head>\n<body>\n  <h1>Curry (two-arg)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction curry2(f) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.curry2 = curry2;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const add=(a,b)=>a+b; const c=window.curry2(add); const p=[],f=[]; if(c(2)(3)===5) p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "curry(f)(a)(b) == f(a,b)."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Curry (two-arg)</title>\n</head>\n<body>\n  <h1>Curry (two-arg)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function curry2(f){ return a=>b=>f(a,b); } window.curry2=curry2;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Return a function that returns a function."
      },
      {
        "level": 2,
        "text": "Capture first arg then call with second."
      },
      {
        "level": 3,
        "text": "Keep order (a,b)."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Curry (two-arg)</title>\n</head>\n<body>\n  <h1>Curry (two-arg)</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function curry2(f){ function step(a){ return function(b){ return f(a,b); } } return step; } window.curry2=curry2;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-026",
    "title": "Parse Query String",
    "description": "Parse '?a=1&b=hello' into {a:'1',b:'hello'}.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Parse Query String</title>\n</head>\n<body>\n  <h1>Parse Query String</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction parseQuery(qs) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.parseQuery = parseQuery;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; const o=window.parseQuery('?a=1&b=hello'); if(o.a==='1'&&o.b==='hello') p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "Parse '?a=1&b=hello' into {a:'1',b:'hello'}."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Parse Query String</title>\n</head>\n<body>\n  <h1>Parse Query String</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function parseQuery(qs){ qs=qs.replace(/^\\?/,''); const out={}; if(!qs) return out; for(const pair of qs.split('&')){ const [k,v='']=pair.split('='); out[decodeURIComponent(k)]=decodeURIComponent(v); } return out;} window.parseQuery=parseQuery;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Trim leading '?'."
      },
      {
        "level": 2,
        "text": "Split by '&', then '='."
      },
      {
        "level": 3,
        "text": "decodeURIComponent values."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Parse Query String</title>\n</head>\n<body>\n  <h1>Parse Query String</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function parseQuery(qs){ const url=new URL('http://x/'+qs); return Object.fromEntries(url.searchParams.entries()); } window.parseQuery=parseQuery;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-027",
    "title": "toCamelCase",
    "description": "Convert 'hello-world test' -> 'helloWorldTest'.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>toCamelCase</title>\n</head>\n<body>\n  <h1>toCamelCase</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction toCamelCase(s) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.toCamelCase = toCamelCase;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const r=window.toCamelCase('hello-world test'); const p=[],f=[]; if(r==='helloWorldTest')p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "Convert 'hello-world test' -> 'helloWorldTest'."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>toCamelCase</title>\n</head>\n<body>\n  <h1>toCamelCase</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function toCamelCase(s){ const parts=s.toLowerCase().split(/[^a-z0-9]+/).filter(Boolean); return parts[0]+parts.slice(1).map(x=>x[0].toUpperCase()+x.slice(1)).join(''); } window.toCamelCase=toCamelCase;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Split on non-alphanumeric."
      },
      {
        "level": 2,
        "text": "Lowercase first word; capitalize subsequent first letters."
      },
      {
        "level": 3,
        "text": "Join without separators."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>toCamelCase</title>\n</head>\n<body>\n  <h1>toCamelCase</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function toCamelCase(s){ return s.replace(/[^a-zA-Z0-9]+(.)/g,(m,chr)=>chr.toUpperCase()).replace(/^[A-Z]/,c=>c.toLowerCase()); } window.toCamelCase=toCamelCase;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-028",
    "title": "fromCamelCase",
    "description": "Convert 'helloWorldTest' -> 'hello-world-test'.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>fromCamelCase</title>\n</head>\n<body>\n  <h1>fromCamelCase</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction fromCamelCase(s) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.fromCamelCase = fromCamelCase;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const r=window.fromCamelCase('helloWorldTest'); const p=[],f=[]; if(r==='hello-world-test')p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "Convert 'helloWorldTest' -> 'hello-world-test'."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>fromCamelCase</title>\n</head>\n<body>\n  <h1>fromCamelCase</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function fromCamelCase(s){ return s.replace(/([A-Z])/g,'-$1').toLowerCase(); } window.fromCamelCase=fromCamelCase;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Insert '-' before capitals."
      },
      {
        "level": 2,
        "text": "Lowercase result."
      },
      {
        "level": 3,
        "text": "Edge-cases: acronyms are fine."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>fromCamelCase</title>\n</head>\n<body>\n  <h1>fromCamelCase</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function fromCamelCase(s){ let out=''; for(const ch of s){ if(ch>='A'&&ch<='Z') out+='-'+ch.toLowerCase(); else out+=ch; } return out;} window.fromCamelCase=fromCamelCase;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-029",
    "title": "Longest Common Prefix",
    "description": "Given array of strings, return longest common prefix.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Longest Common Prefix</title>\n</head>\n<body>\n  <h1>Longest Common Prefix</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction longestCommonPrefix(arr) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.longestCommonPrefix = longestCommonPrefix;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; const fn=window.longestCommonPrefix; if(fn(['flower','flow','flight'])==='fl')p.push('a1'); if(fn(['dog','racecar','car'])==='')p.push('a2'); return {passedIds:p, failedIds:f, passed:p.length===2};",
        "label": "Given array of strings, return longest common prefix."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Longest Common Prefix</title>\n</head>\n<body>\n  <h1>Longest Common Prefix</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function longestCommonPrefix(arr){ if(!arr.length) return ''; let pre=arr[0]; for(const s of arr){ while(!s.startsWith(pre)) pre=pre.slice(0,-1); if(!pre) break; } return pre;} window.longestCommonPrefix=longestCommonPrefix;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use first word as baseline."
      },
      {
        "level": 2,
        "text": "Shrink prefix until all match."
      },
      {
        "level": 3,
        "text": "Careful with empty arrays."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Longest Common Prefix</title>\n</head>\n<body>\n  <h1>Longest Common Prefix</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function longestCommonPrefix(arr){ if(!arr.length) return ''; let i=0; while(arr.every(s=>s[i]!==undefined && s[i]===arr[0][i])) i++; return arr[0].slice(0,i);} window.longestCommonPrefix=longestCommonPrefix;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-030",
    "title": "Array Intersection",
    "description": "Return array of values present in both arrays (unique, ordered by first).",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Array Intersection</title>\n</head>\n<body>\n  <h1>Array Intersection</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction intersection(a,b) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.intersection = intersection;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const r=window.intersection([1,2,2,3],[2,3,4]); const p=[],f=[]; if(JSON.stringify(r)==='[2,3]')p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "Return array of values present in both arrays (unique, ordered by first)."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Array Intersection</title>\n</head>\n<body>\n  <h1>Array Intersection</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function intersection(a,b){const set=new Set(b); const seen=new Set(); const out=[]; for(const x of a){ if(set.has(x) && !seen.has(x)){ seen.add(x); out.push(x); } } return out;} window.intersection=intersection;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use a Set for the second array."
      },
      {
        "level": 2,
        "text": "Track seen to avoid duplicates."
      },
      {
        "level": 3,
        "text": "Preserve order of first array."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Array Intersection</title>\n</head>\n<body>\n  <h1>Array Intersection</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function intersection(a,b){const sb=new Set(b); return [...new Set(a)].filter(x=>sb.has(x));} window.intersection=intersection;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-031",
    "title": "Array Difference",
    "description": "Return items in a that are not in b (preserve order, unique).",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Array Difference</title>\n</head>\n<body>\n  <h1>Array Difference</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction difference(a,b) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.difference = difference;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const r=window.difference([1,2,3,2],[2,4]); const p=[],f=[]; if(JSON.stringify(r)==='[1,3]')p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "Return items in a that are not in b (preserve order, unique)."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Array Difference</title>\n</head>\n<body>\n  <h1>Array Difference</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function difference(a,b){const sb=new Set(b); const seen=new Set(); const out=[]; for(const x of a){ if(!sb.has(x) && !seen.has(x)){ seen.add(x); out.push(x);} } return out;} window.difference=difference;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use a Set for b."
      },
      {
        "level": 2,
        "text": "Skip duplicates."
      },
      {
        "level": 3,
        "text": "Keep order."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Array Difference</title>\n</head>\n<body>\n  <h1>Array Difference</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function difference(a,b){const sb=new Set(b); return [...new Set(a)].filter(x=>!sb.has(x));} window.difference=difference;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-032",
    "title": "Pick Keys",
    "description": "Return new object with only listed keys.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Pick Keys</title>\n</head>\n<body>\n  <h1>Pick Keys</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction pick(obj, keys) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.pick = pick;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const r=window.pick({a:1,b:2,c:3}, ['a','c']); const p=[],f=[]; if(JSON.stringify(r)==='{\"a\":1,\"c\":3}')p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "Return new object with only listed keys."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Pick Keys</title>\n</head>\n<body>\n  <h1>Pick Keys</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function pick(obj,keys){const out={}; for(const k of keys){ if(Object.prototype.hasOwnProperty.call(obj,k)) out[k]=obj[k]; } return out;} window.pick=pick;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Iterate keys array."
      },
      {
        "level": 2,
        "text": "Copy if key in obj."
      },
      {
        "level": 3,
        "text": "Don't mutate original."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Pick Keys</title>\n</head>\n<body>\n  <h1>Pick Keys</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function pick(obj,keys){return Object.fromEntries(keys.filter(k=>k in obj).map(k=>[k,obj[k]]));} window.pick=pick;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-033",
    "title": "Omit Keys",
    "description": "Return new object without listed keys.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Omit Keys</title>\n</head>\n<body>\n  <h1>Omit Keys</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction omit(obj, keys) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.omit = omit;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const r=window.omit({a:1,b:2,c:3}, ['b']); const p=[],f=[]; if(JSON.stringify(r)==='{\"a\":1,\"c\":3}')p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "Return new object without listed keys."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Omit Keys</title>\n</head>\n<body>\n  <h1>Omit Keys</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function omit(obj,keys){const ex=new Set(keys); const out={}; for(const k in obj){ if(!ex.has(k)) out[k]=obj[k]; } return out;} window.omit=omit;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Copy all except excluded."
      },
      {
        "level": 2,
        "text": "Use Set for fast lookup."
      },
      {
        "level": 3,
        "text": "Avoid mutating input."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Omit Keys</title>\n</head>\n<body>\n  <h1>Omit Keys</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function omit(obj,keys){const ex=new Set(keys); return Object.fromEntries(Object.entries(obj).filter(([k])=>!ex.has(k)));} window.omit=omit;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-034",
    "title": "Greatest Common Divisor",
    "description": "Return gcd(a,b) where a,b>=0.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Greatest Common Divisor</title>\n</head>\n<body>\n  <h1>Greatest Common Divisor</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction gcd(a,b) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.gcd = gcd;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const fn=window.gcd; const p=[],f=[]; if(fn(54,24)===6)p.push('a1'); if(fn(0,5)===5)p.push('a2'); return {passedIds:p, failedIds:f, passed:p.length===2};",
        "label": "Return gcd(a,b) where a,b>=0."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Greatest Common Divisor</title>\n</head>\n<body>\n  <h1>Greatest Common Divisor</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function gcd(a,b){ while(b!==0){ [a,b]=[b, a%b]; } return Math.abs(a);} window.gcd=gcd;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use Euclidean algorithm."
      },
      {
        "level": 2,
        "text": "gcd(a,0)=a."
      },
      {
        "level": 3,
        "text": "Loop until remainder is 0."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Greatest Common Divisor</title>\n</head>\n<body>\n  <h1>Greatest Common Divisor</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function gcd(a,b){ a=Math.abs(a); b=Math.abs(b); if(b===0) return a; return gcd(b,a%b);} window.gcd=gcd;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-035",
    "title": "Least Common Multiple",
    "description": "Return lcm(a,b) using gcd.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Least Common Multiple</title>\n</head>\n<body>\n  <h1>Least Common Multiple</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction lcm(a,b) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.lcm = lcm;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const fn=window.lcm; const p=[],f=[]; if(fn(4,6)===12)p.push('a1'); if(fn(0,5)===0)p.push('a2'); return {passedIds:p, failedIds:f, passed:p.length===2};",
        "label": "Return lcm(a,b) using gcd."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Least Common Multiple</title>\n</head>\n<body>\n  <h1>Least Common Multiple</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function lcm(a,b){ if(a===0||b===0) return 0; const gcd=(x,y)=>y?gcd(y,x%y):Math.abs(x); return Math.abs(a*b)/gcd(a,b);} window.lcm=lcm;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use |a*b|/gcd(a,b)."
      },
      {
        "level": 2,
        "text": "Handle zeros."
      },
      {
        "level": 3,
        "text": "Reuse gcd function or inline."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Least Common Multiple</title>\n</head>\n<body>\n  <h1>Least Common Multiple</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function lcm(a,b){ if(!a||!b) return 0; let x=Math.abs(a), y=Math.abs(b); while(y){ [x,y]=[y,x%y]; } return Math.abs(a*b)/x;} window.lcm=lcm;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-036",
    "title": "Fast Power",
    "description": "Compute a^b using fast exponentiation (b>=0).",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Fast Power</title>\n</head>\n<body>\n  <h1>Fast Power</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction powFast(a,b) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.powFast = powFast;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const fn=window.powFast; const p=[],f=[]; if(fn(2,10)===1024)p.push('a1'); if(fn(5,0)===1)p.push('a2'); if(fn(3,1)===3)p.push('a3'); return {passedIds:p, failedIds:f, passed:p.length===3};",
        "label": "Compute a^b using fast exponentiation (b>=0)."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Fast Power</title>\n</head>\n<body>\n  <h1>Fast Power</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function powFast(a,b){ let res=1, x=a, e=b; while(e>0){ if(e&1) res*=x; x*=x; e>>=1; } return res;} window.powFast=powFast;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Exponentiation by squaring."
      },
      {
        "level": 2,
        "text": "Handle b=0."
      },
      {
        "level": 3,
        "text": "When b is odd, multiply once."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Fast Power</title>\n</head>\n<body>\n  <h1>Fast Power</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function powFast(a,b){ if(b===0) return 1; if(b%2===0) return powFast(a*a, Math.floor(b/2)); return a*powFast(a, b-1);} window.powFast=powFast;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-037",
    "title": "Binary Search",
    "description": "Return index of target in sorted array, or -1.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Binary Search</title>\n</head>\n<body>\n  <h1>Binary Search</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction binarySearch(arr, target) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.binarySearch = binarySearch;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const fn=window.binarySearch; const p=[],f=[]; if(fn([1,3,5,7,9],7)===3)p.push('a1'); if(fn([1,3,5],2)===-1)p.push('a2'); return {passedIds:p, failedIds:f, passed:p.length===2};",
        "label": "Return index of target in sorted array, or -1."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Binary Search</title>\n</head>\n<body>\n  <h1>Binary Search</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function binarySearch(arr,t){ let lo=0, hi=arr.length-1; while(lo<=hi){ const m=(lo+hi)>>1; if(arr[m]===t) return m; if(arr[m]<t) lo=m+1; else hi=m-1;} return -1;} window.binarySearch=binarySearch;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Maintain low/high pointers."
      },
      {
        "level": 2,
        "text": "Compare mid value."
      },
      {
        "level": 3,
        "text": "Narrow search bounds."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Binary Search</title>\n</head>\n<body>\n  <h1>Binary Search</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function binarySearch(arr,t){ return arr.indexOf(t); } window.binarySearch=binarySearch;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-038",
    "title": "Merge Sort",
    "description": "Return a new array sorted ascending using merge sort.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Merge Sort</title>\n</head>\n<body>\n  <h1>Merge Sort</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction mergeSort(arr) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.mergeSort = mergeSort;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const out=window.mergeSort([3,1,4,1,5]); const p=[],f=[]; if(JSON.stringify(out)==='[1,1,3,4,5]')p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "Return a new array sorted ascending using merge sort."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Merge Sort</title>\n</head>\n<body>\n  <h1>Merge Sort</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function mergeSort(arr){ if(arr.length<2) return arr.slice(); const mid=arr.length>>1; const L=mergeSort(arr.slice(0,mid)), R=mergeSort(arr.slice(mid)); const out=[]; let i=0,j=0; while(i<L.length&&j<R.length){ out.push(L[i]<=R[j]?L[i++]:R[j++]); } return out.concat(L.slice(i),R.slice(j)); } window.mergeSort=mergeSort;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Divide and conquer."
      },
      {
        "level": 2,
        "text": "Merge two sorted halves."
      },
      {
        "level": 3,
        "text": "Return a new array."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Merge Sort</title>\n</head>\n<body>\n  <h1>Merge Sort</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function mergeSort(arr){ return arr.slice().sort((a,b)=>a-b); } window.mergeSort=mergeSort;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-039",
    "title": "Top-K Frequent",
    "description": "Return the k most frequent elements in any order.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Top-K Frequent</title>\n</head>\n<body>\n  <h1>Top-K Frequent</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction topKFrequent(arr,k) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.topKFrequent = topKFrequent;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const r=window.topKFrequent([1,1,1,2,2,3],2); const p=[],f=[]; if(r.length===2 && r.includes(1) && r.includes(2)) p.push('a1'); return {passedIds:p, failedIds:f, passed:p.length===1};",
        "label": "Return the k most frequent elements in any order."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Top-K Frequent</title>\n</head>\n<body>\n  <h1>Top-K Frequent</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function topKFrequent(arr,k){const m=new Map(); for(const x of arr) m.set(x,(m.get(x)||0)+1); return [...m.entries()].sort((a,b)=>b[1]-a[1]).slice(0,k).map(([x])=>x);} window.topKFrequent=topKFrequent;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Build a frequency map."
      },
      {
        "level": 2,
        "text": "Sort entries by count or bucket sort."
      },
      {
        "level": 3,
        "text": "Return first k keys."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Top-K Frequent</title>\n</head>\n<body>\n  <h1>Top-K Frequent</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function topKFrequent(arr,k){const m={}; for(const x of arr) m[x]=(m[x]||0)+1; const buckets=[]; for(const [x,c] of Object.entries(m)){ (buckets[c]||(buckets[c]=[])).push(+x); } const out=[]; for(let c=buckets.length-1;c>=0&&out.length<k;c--){ if(buckets[c]) out.push(...buckets[c]); } return out.slice(0,k);} window.topKFrequent=topKFrequent;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "js-040",
    "title": "Roman to Integer",
    "description": "Convert a Roman numeral (I,V,X,L,C,D,M) to integer.",
    "difficulty": 3,
    "category": "javascript",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Roman to Integer</title>\n</head>\n<body>\n  <h1>Roman to Integer</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "// Implement the function below.\n// Keep it pure: no DOM access, no network, no randomness (unless specified).\nfunction romanToInt(s) {\n  // TODO\n}\n\n// Do not edit below this line\nwindow.romanToInt = romanToInt;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const fn=window.romanToInt; const p=[],f=[]; if(fn('III')===3)p.push('a1'); if(fn('IV')===4)p.push('a2'); if(fn('MCMXCIV')===1994)p.push('a3'); return {passedIds:p, failedIds:f, passed:p.length===3};",
        "label": "Convert a Roman numeral (I,V,X,L,C,D,M) to integer."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Roman to Integer</title>\n</head>\n<body>\n  <h1>Roman to Integer</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* not used */\n",
      "script.js": "function romanToInt(s){ const val={I:1,V:5,X:10,L:50,C:100,D:500,M:1000}; let res=0; for(let i=0;i<s.length;i++){ const v=val[s[i]], n=val[s[i+1]]||0; res += v < n ? -v : v; } return res;} window.romanToInt=romanToInt;"
    },
    "hints": [
      {
        "level": 1,
        "text": "Map symbols to values."
      },
      {
        "level": 2,
        "text": "Subtract when a smaller value precedes larger."
      },
      {
        "level": 3,
        "text": "Accumulate result."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Roman to Integer</title>\n</head>\n<body>\n  <h1>Roman to Integer</h1>\n  <p>Open the console and implement <code>script.js</code>.</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* not used */\n",
          "script.js": "function romanToInt(s){ const val=new Map([['I',1],['V',5],['X',10],['L',50],['C',100],['D',500],['M',1000]]); let res=0, prev=0; for(let i=s.length-1;i>=0;i--){ const v=val.get(s[i]); res += v<prev? -v : v; prev=v; } return res;} window.romanToInt=romanToInt;"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Mastering pure logic builds the mental toolkit behind every web app: transforming data, validating inputs, crafting algorithms that scale, and writing predictable functions that are easy to test—skills you rely on long before the UI ever renders."
  },
  {
    "id": "web-001",
    "title": "Change Heading Text",
    "description": "Click button to change h1 text to 'Updated'.",
    "difficulty": 4,
    "category": "html-css-js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Change Heading Text</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1 id='title'>Original</h1><button id='btn'>Change</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* style */\n",
      "script.js": "// Add click handler to change h1 text\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; const btn=document.querySelector('#btn'); btn.click(); if(document.querySelector('#title').textContent==='Updated') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Click button to change h1 text to 'Updated'."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Change Heading Text</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1 id='title'>Original</h1><button id='btn'>Change</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "document.querySelector('#btn').addEventListener('click',()=>{ document.querySelector('#title').textContent='Updated'; });"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use document.querySelector."
      },
      {
        "level": 2,
        "text": "AddEventListener on #btn."
      },
      {
        "level": 3,
        "text": "Set textContent of #title."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Change Heading Text</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1 id='title'>Original</h1><button id='btn'>Change</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* */\n",
          "script.js": "const btn=document.getElementById('btn'); const h=document.getElementById('title'); btn.onclick=()=>h.innerText='Updated';"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Real web apps are interactive: DOM manipulation, styling, and events transform pure logic into user-facing behavior. These tasks blend algorithmic thinking with UI changes you can verify instantly."
  },
  {
    "id": "web-002",
    "title": "Dark Mode Toggle",
    "description": "Toggle 'dark' class on body when switch clicked.",
    "difficulty": 4,
    "category": "html-css-js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Dark Mode Toggle</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='toggle'>Toggle</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "body.dark { background:#111; color:#eee; }\n",
      "script.js": "// Toggle dark class on body\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; const btn=document.querySelector('#toggle'); btn.click(); if(document.body.classList.contains('dark')) p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Toggle 'dark' class on body when switch clicked."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Dark Mode Toggle</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='toggle'>Toggle</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "body.dark{background:#111;color:#eee;}\n",
      "script.js": "document.querySelector('#toggle').addEventListener('click',()=>document.body.classList.toggle('dark'));"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use classList.toggle."
      },
      {
        "level": 2,
        "text": "Target document.body."
      },
      {
        "level": 3,
        "text": "Bind click event."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Dark Mode Toggle</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='toggle'>Toggle</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "body.dark{background:#111;color:#eee;}\n",
          "script.js": "document.getElementById('toggle').onclick=()=>document.body.className+=(document.body.className.includes('dark')?'':' dark');"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Real web apps are interactive: DOM manipulation, styling, and events transform pure logic into user-facing behavior. These tasks blend algorithmic thinking with UI changes you can verify instantly."
  },
  {
    "id": "web-003",
    "title": "Add List Item",
    "description": "Click 'Add' to append <li>New</li> to #list.",
    "difficulty": 4,
    "category": "html-css-js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Add List Item</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ul id='list'><li>Old</li></ul><button id='add'>Add</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "// Append an li to #list on click\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; document.querySelector('#add').click(); const items=[...document.querySelectorAll('#list li')]; if(items.length===2 && items[1].textContent==='New') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Click 'Add' to append <li>New</li> to #list."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Add List Item</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ul id='list'><li>Old</li></ul><button id='add'>Add</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "document.getElementById('add').addEventListener('click',()=>{ const li=document.createElement('li'); li.textContent='New'; document.getElementById('list').appendChild(li); });"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use createElement('li')."
      },
      {
        "level": 2,
        "text": "Set textContent."
      },
      {
        "level": 3,
        "text": "appendChild to #list."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Add List Item</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ul id='list'><li>Old</li></ul><button id='add'>Add</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* */\n",
          "script.js": "const btn=document.getElementById('add'); btn.onclick=()=>{ document.querySelector('#list').insertAdjacentHTML('beforeend','<li>New</li>'); };"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Real web apps are interactive: DOM manipulation, styling, and events transform pure logic into user-facing behavior. These tasks blend algorithmic thinking with UI changes you can verify instantly."
  },
  {
    "id": "web-006",
    "title": "Simple Tabs",
    "description": "Clicking a tab shows its panel and hides the other.",
    "difficulty": 4,
    "category": "html-css-js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Simple Tabs</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button class='tab' data-for='a'>A</button><button class='tab' data-for='b'>B</button><div id='a'>A</div><div id='b'>B</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#a,#b{display:none} #a.active,#b.active{display:block}\n",
      "script.js": "// Implement tabs\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; const btn=[...document.querySelectorAll('.tab')][1]; btn.click(); const a=getComputedStyle(document.querySelector('#a')).display; const b=getComputedStyle(document.querySelector('#b')).display; if(a==='none' && b!=='none') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Clicking a tab shows its panel and hides the other."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Simple Tabs</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button class='tab' data-for='a'>A</button><button class='tab' data-for='b'>B</button><div id='a'>A</div><div id='b'>B</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#a,#b{display:none} #a.active,#b.active{display:block}\n",
      "script.js": "document.querySelectorAll('.tab').forEach(t=>t.addEventListener('click',()=>{ const id=t.dataset.for; document.querySelectorAll('#a,#b').forEach(p=>p.classList.remove('active')); document.getElementById(id).classList.add('active'); }));"
    },
    "hints": [
      {
        "level": 1,
        "text": "Add click listeners to .tab."
      },
      {
        "level": 2,
        "text": "Remove active from all panels."
      },
      {
        "level": 3,
        "text": "Add active to target panel."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Simple Tabs</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button class='tab' data-for='a'>A</button><button class='tab' data-for='b'>B</button><div id='a'>A</div><div id='b'>B</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#a,#b{display:none} #a.active,#b.active{display:block}\n",
          "script.js": "const tabs=document.getElementsByClassName('tab'); for(const t of tabs){ t.onclick=()=>{ document.getElementById('a').className=''; document.getElementById('b').className=''; document.getElementById(t.getAttribute('data-for')).className='active'; }; }"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Real web apps are interactive: DOM manipulation, styling, and events transform pure logic into user-facing behavior. These tasks blend algorithmic thinking with UI changes you can verify instantly."
  },
  {
    "id": "web-013",
    "title": "Modal Open/Close",
    "description": "Open modal by adding 'open' class; close removes it.",
    "difficulty": 4,
    "category": "html-css-js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Modal Open/Close</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='open'>Open</button><div id='modal' class='modal'><button id='close'>X</button></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": ".modal{display:none} .modal.open{display:block}\n",
      "script.js": "// Wire up open/close\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; document.querySelector('#open').click(); if(!document.querySelector('#modal').classList.contains('open')) f.push('a1'); document.querySelector('#close').click(); if(document.querySelector('#modal').classList.contains('open')) f.push('a2'); return {passedIds: f.length?[]:['a1','a2'], failedIds:f, passed:!f.length};",
        "label": "Open modal by adding 'open' class; close removes it."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Modal Open/Close</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='open'>Open</button><div id='modal' class='modal'><button id='close'>X</button></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": ".modal{display:none} .modal.open{display:block}\n",
      "script.js": "document.getElementById('open').onclick=()=>document.getElementById('modal').classList.add('open'); document.getElementById('close').onclick=()=>document.getElementById('modal').classList.remove('open');"
    },
    "hints": [
      {
        "level": 1,
        "text": "Add click listeners."
      },
      {
        "level": 2,
        "text": "classList.add/remove."
      },
      {
        "level": 3,
        "text": "CSS controls visibility."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Modal Open/Close</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='open'>Open</button><div id='modal' class='modal'><button id='close'>X</button></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": ".modal{display:none} .modal.open{display:block}\n",
          "script.js": "const m=document.getElementById('modal'); document.getElementById('open').addEventListener('click',()=>m.className='modal open'); document.getElementById('close').addEventListener('click',()=>m.className='modal');"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Real web apps are interactive: DOM manipulation, styling, and events transform pure logic into user-facing behavior. These tasks blend algorithmic thinking with UI changes you can verify instantly."
  },
  {
    "id": "web-018",
    "title": "Remove Element",
    "description": "Remove #ad from the page.",
    "difficulty": 4,
    "category": "html-css-js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Remove Element</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='ad'>Ad</div><div>Content</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "// Remove #ad\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; const el=document.querySelector('#ad'); if(el) el.remove(); if(!document.querySelector('#ad')) p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Remove #ad from the page."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Remove Element</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='ad'>Ad</div><div>Content</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "document.getElementById('ad').remove();"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use element.remove()."
      },
      {
        "level": 2,
        "text": "Or parent.removeChild."
      },
      {
        "level": 3,
        "text": "Ensure #ad is gone."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Remove Element</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='ad'>Ad</div><div>Content</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* */\n",
          "script.js": "const el=document.getElementById('ad'); el.parentNode.removeChild(el);"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Real web apps are interactive: DOM manipulation, styling, and events transform pure logic into user-facing behavior. These tasks blend algorithmic thinking with UI changes you can verify instantly."
  },
  {
    "id": "web-019",
    "title": "Select All",
    "description": "Master checkbox toggles all .item checkboxes.",
    "difficulty": 4,
    "category": "html-css-js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Select All</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <label><input id='all' type='checkbox'></label><div><label><input class='item' type='checkbox'></label><label><input class='item' type='checkbox'></label></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "// Implement select-all\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; const all=document.querySelector('#all'); const items=[...document.querySelectorAll('.item')]; all.checked=true; all.dispatchEvent(new Event('change')); if(items.every(i=>i.checked)) p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Master checkbox toggles all .item checkboxes."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Select All</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <label><input id='all' type='checkbox'></label><div><label><input class='item' type='checkbox'></label><label><input class='item' type='checkbox'></label></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "document.getElementById('all').addEventListener('change',e=>{ document.querySelectorAll('.item').forEach(i=>i.checked=e.target.checked); });"
    },
    "hints": [
      {
        "level": 1,
        "text": "Listen for change on #all."
      },
      {
        "level": 2,
        "text": "Set each .item.checked."
      },
      {
        "level": 3,
        "text": "Query by class."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Select All</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <label><input id='all' type='checkbox'></label><div><label><input class='item' type='checkbox'></label><label><input class='item' type='checkbox'></label></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* */\n",
          "script.js": "const all=document.getElementById('all'); all.onchange=()=>{ for(const i of document.getElementsByClassName('item')) i.checked=all.checked; };"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Real web apps are interactive: DOM manipulation, styling, and events transform pure logic into user-facing behavior. These tasks blend algorithmic thinking with UI changes you can verify instantly."
  },
  {
    "id": "web-021",
    "title": "Highlight Search",
    "description": "Wrap matches of 'lo' in <mark> inside #p.",
    "difficulty": 4,
    "category": "html-css-js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Highlight Search</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p id='p'>lorem ipsum dolor</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "mark{ background: yellow; }\n",
      "script.js": "// Replace innerHTML with marked matches 'lo'\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; const el=document.querySelector('#p'); el.innerHTML=el.textContent.replace(/lo/g,'<mark>lo</mark>'); const count=(el.innerHTML.match(/<mark>/g)||[]).length; if(count>=2) p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Wrap matches of 'lo' in <mark> inside #p."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Highlight Search</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p id='p'>lorem ipsum dolor</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "mark{ background: yellow; }\n",
      "script.js": "const el=document.getElementById('p'); el.innerHTML=el.textContent.replace(/lo/g,'<mark>lo</mark>');"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use textContent then replace."
      },
      {
        "level": 2,
        "text": "Use regex with global flag."
      },
      {
        "level": 3,
        "text": "Set innerHTML back."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Highlight Search</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p id='p'>lorem ipsum dolor</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "mark{ background: yellow; }\n",
          "script.js": "const txt=document.getElementById('p').textContent; document.getElementById('p').innerHTML=txt.split('lo').join('<mark>lo</mark>');"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Real web apps are interactive: DOM manipulation, styling, and events transform pure logic into user-facing behavior. These tasks blend algorithmic thinking with UI changes you can verify instantly."
  },
  {
    "id": "web-023",
    "title": "Accordion",
    "description": "Click header toggles panel visibility.",
    "difficulty": 4,
    "category": "html-css-js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Accordion</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button class='acc' id='h'>Header</button><div id='panel'>Text</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#panel{display:none} #panel.open{display:block}\n",
      "script.js": "// Toggle open class\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; document.querySelector('#h').click(); if(getComputedStyle(document.querySelector('#panel')).display!=='none') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Click header toggles panel visibility."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Accordion</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button class='acc' id='h'>Header</button><div id='panel'>Text</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#panel{display:none} #panel.open{display:block}\n",
      "script.js": "const p=document.getElementById('panel'); document.getElementById('h').onclick=()=>p.classList.toggle('open');"
    },
    "hints": [
      {
        "level": 1,
        "text": "Add click listener."
      },
      {
        "level": 2,
        "text": "Toggle class on #panel."
      },
      {
        "level": 3,
        "text": "Display controlled by CSS."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Accordion</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button class='acc' id='h'>Header</button><div id='panel'>Text</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#panel{display:none} #panel.open{display:block}\n",
          "script.js": "document.getElementById('h').addEventListener('click',()=>{ const p=document.getElementById('panel'); p.className = p.className==='open'?'':'open'; });"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Real web apps are interactive: DOM manipulation, styling, and events transform pure logic into user-facing behavior. These tasks blend algorithmic thinking with UI changes you can verify instantly."
  },
  {
    "id": "web-026",
    "title": "Progress Bar",
    "description": "Set width of .bar to 60%.",
    "difficulty": 4,
    "category": "html-css-js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Progress Bar</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div class='progress' id='p'><div class='bar' id='b'></div></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": ".progress{width:200px;height:10px;background:#eee} .bar{height:10px;width:0;background:#09f}\n",
      "script.js": "// Set #b width to 60%\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; const b=document.querySelector('#b'); b.style.width='60%'; if(getComputedStyle(b).width.endswith('%') or int(''.join(filter(str.isdigit, getComputedStyle(b).width)))>0) p.push('a1'); return {passedIds:p, failedIds:[], passed:true};",
        "label": "Set width of .bar to 60%."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Progress Bar</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div class='progress' id='p'><div class='bar' id='b'></div></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": ".progress{width:200px;height:10px;background:#eee} .bar{height:10px;width:60%;background:#09f}\n",
      "script.js": "// no JS\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Set style.width on .bar."
      },
      {
        "level": 2,
        "text": "Use percentage."
      },
      {
        "level": 3,
        "text": "Container provides context."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Progress Bar</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div class='progress' id='p'><div class='bar' id='b'></div></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": ".progress{width:200px;height:10px;background:#eee} .bar{height:10px;background:#09f}\n",
          "script.js": "document.getElementById('b').style.width='60%';"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Real web apps are interactive: DOM manipulation, styling, and events transform pure logic into user-facing behavior. These tasks blend algorithmic thinking with UI changes you can verify instantly."
  },
  {
    "id": "web-029",
    "title": "Swap List Items",
    "description": "Swap #a and #b positions in the list.",
    "difficulty": 4,
    "category": "html-css-js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Swap List Items</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ul id='list'><li id='a'>A</li><li id='b'>B</li></ul>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "// Swap nodes\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; const list=document.querySelector('#list'); const a=document.getElementById('a'); const b=document.getElementById('b'); list.insertBefore(b,a); const order=[...list.children].map(x=>x.id).join(''); if(order==='ba') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Swap #a and #b positions in the list."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Swap List Items</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ul id='list'><li id='a'>A</li><li id='b'>B</li></ul>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "const l=document.getElementById('list'); const a=document.getElementById('a'); const b=document.getElementById('b'); l.insertBefore(b,a);"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use insertBefore."
      },
      {
        "level": 2,
        "text": "Work with parent node."
      },
      {
        "level": 3,
        "text": "Check order after."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Swap List Items</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ul id='list'><li id='a'>A</li><li id='b'>B</li></ul>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* */\n",
          "script.js": "const l=document.getElementById('list'); const a=document.getElementById('a'); const b=document.getElementById('b'); const t=document.createElement('li'); l.replaceChild(t,a); l.replaceChild(a,b); l.replaceChild(b,t);"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Real web apps are interactive: DOM manipulation, styling, and events transform pure logic into user-facing behavior. These tasks blend algorithmic thinking with UI changes you can verify instantly."
  },
  {
    "id": "web-031",
    "title": "Countdown Once",
    "description": "Click decreases #n by 1.",
    "difficulty": 4,
    "category": "html-css-js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Countdown Once</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='go'>Go</button> <span id='n'>3</span>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "// decrement on click\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; const btn=document.querySelector('#go'); btn.onclick=()=>{ const n=document.getElementById('n'); n.textContent=String(+n.textContent-1); }; btn.click(); if(document.getElementById('n').textContent==='2') p.push('a1'); return {passedIds:p, failedIds:[], passed:true};",
        "label": "Click decreases #n by 1."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Countdown Once</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='go'>Go</button> <span id='n'>3</span>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "document.getElementById('go').addEventListener('click',()=>{ const n=document.getElementById('n'); n.textContent=String(+n.textContent-1); });"
    },
    "hints": [
      {
        "level": 1,
        "text": "Add click handler."
      },
      {
        "level": 2,
        "text": "ParseInt and subtract."
      },
      {
        "level": 3,
        "text": "Update textContent."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Countdown Once</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='go'>Go</button> <span id='n'>3</span>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* */\n",
          "script.js": "const b=document.getElementById('go'); b.onclick=()=>{ const n=document.getElementById('n'); n.textContent = String(parseInt(n.textContent,10)-1); };"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Real web apps are interactive: DOM manipulation, styling, and events transform pure logic into user-facing behavior. These tasks blend algorithmic thinking with UI changes you can verify instantly."
  },
  {
    "id": "web-036",
    "title": "Prevent Form Submit",
    "description": "Block default submit; set #status to 'blocked'.",
    "difficulty": 4,
    "category": "html-css-js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Prevent Form Submit</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <form id='f'><input><button id='s' type='submit'>Send</button></form><p id='status'></p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "// prevent submit\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; document.getElementById('f').addEventListener('submit',e=>{ e.preventDefault(); document.getElementById('status').textContent='blocked'; }); document.getElementById('s').click(); if(document.getElementById('status').textContent==='blocked') p.push('a1'); return {passedIds:p, failedIds:[], passed:true};",
        "label": "Block default submit; set #status to 'blocked'."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Prevent Form Submit</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <form id='f'><input><button id='s' type='submit'>Send</button></form><p id='status'></p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "document.getElementById('f').onsubmit=(e)=>{ e.preventDefault(); document.getElementById('status').textContent='blocked'; };"
    },
    "hints": [
      {
        "level": 1,
        "text": "Listen to submit event."
      },
      {
        "level": 2,
        "text": "Call preventDefault()."
      },
      {
        "level": 3,
        "text": "Update status."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Prevent Form Submit</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <form id='f'><input><button id='s' type='submit'>Send</button></form><p id='status'></p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* */\n",
          "script.js": "document.getElementById('f').addEventListener('submit',e=>{ e.preventDefault(); document.getElementById('status').innerText='blocked'; });"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Real web apps are interactive: DOM manipulation, styling, and events transform pure logic into user-facing behavior. These tasks blend algorithmic thinking with UI changes you can verify instantly."
  },
  {
    "id": "l2-1-normalize-base",
    "title": "Normalize & Base",
    "description": "Welcome to Normalize & Base! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Normalize & Base are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-10-responsive-nav-css-only",
    "title": "Responsive Nav (CSS only)",
    "description": "Welcome to Responsive Nav (CSS only)! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Responsive Nav (CSS only) are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-11-grid-gallery",
    "title": "Grid Gallery",
    "description": "Welcome to Grid Gallery! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "grid",
        "code": "!!document.querySelector('.grid')",
        "label": "Has element: .grid"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Grid Gallery are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-12-media-queries",
    "title": "Media Queries",
    "description": "Welcome to Media Queries! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Media Queries are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-13-sticky-header",
    "title": "Sticky Header",
    "description": "Welcome to Sticky Header! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Sticky Header are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-14-footer-columns",
    "title": "Footer Columns",
    "description": "Welcome to Footer Columns! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Footer Columns are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-15-css-tooltip",
    "title": "CSS Tooltip",
    "description": "Welcome to CSS Tooltip! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like CSS Tooltip are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-16-css-modal-target",
    "title": "CSS Modal (target)",
    "description": "Welcome to CSS Modal (target)! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like CSS Modal (target) are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-17-animations",
    "title": "Animations",
    "description": "Welcome to Animations! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Animations are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-18-transitions",
    "title": "Transitions",
    "description": "Welcome to Transitions! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Transitions are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-19-svg-sprite",
    "title": "SVG Sprite",
    "description": "Welcome to SVG Sprite! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like SVG Sprite are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-2-type-scale",
    "title": "Type Scale",
    "description": "Welcome to Type Scale! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Type Scale are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-20-aspect-ratio",
    "title": "Aspect Ratio",
    "description": "Welcome to Aspect Ratio! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Aspect Ratio are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-21-form-error-states",
    "title": "Form Error States",
    "description": "Welcome to Form Error States! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Form Error States are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-22-visually-hidden-utility",
    "title": "Visually Hidden Utility",
    "description": "Welcome to Visually Hidden Utility! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Visually Hidden Utility are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-23-theme-toggle-vars",
    "title": "Theme Toggle (vars)",
    "description": "Welcome to Theme Toggle (vars)! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Theme Toggle (vars) are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-24-print-styles",
    "title": "Print Styles",
    "description": "Welcome to Print Styles! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Print Styles are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-25-z-index-dropdown",
    "title": "Z-Index Dropdown",
    "description": "Welcome to Z-Index Dropdown! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Z-Index Dropdown are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-26-sticky-sidebar",
    "title": "Sticky Sidebar",
    "description": "Welcome to Sticky Sidebar! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Sticky Sidebar are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-27-image-fit-sizes",
    "title": "Image Fit & Sizes",
    "description": "Welcome to Image Fit & Sizes! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Image Fit & Sizes are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-28-clamp-typography",
    "title": "Clamp Typography",
    "description": "Welcome to Clamp Typography! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Clamp Typography are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-29-grid-form",
    "title": "Grid Form",
    "description": "Welcome to Grid Form! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "grid",
        "code": "!!document.querySelector('.grid')",
        "label": "Has element: .grid"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Grid Form are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-3-css-variables-theme",
    "title": "CSS Variables Theme",
    "description": "Welcome to CSS Variables Theme! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like CSS Variables Theme are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-30-css-accordion-details",
    "title": "CSS Accordion (details)",
    "description": "Welcome to CSS Accordion (details)! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like CSS Accordion (details) are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-31-css-tabs-radio",
    "title": "CSS Tabs (radio)",
    "description": "Welcome to CSS Tabs (radio)! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like CSS Tabs (radio) are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-32-progress-bar",
    "title": "Progress Bar",
    "description": "Welcome to Progress Bar! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Progress Bar are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-33-badges-pills",
    "title": "Badges & Pills",
    "description": "Welcome to Badges & Pills! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Badges & Pills are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-34-table-styles",
    "title": "Table Styles",
    "description": "Welcome to Table Styles! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "table",
        "code": "!!document.querySelector('table thead th')",
        "label": "Has element: table thead th"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Table Styles are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-35-breadcrumb",
    "title": "Breadcrumb",
    "description": "Welcome to Breadcrumb! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Breadcrumb are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-36-toast-css-show-hide",
    "title": "Toast (CSS show/hide)",
    "description": "Welcome to Toast (CSS show/hide)! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Toast (CSS show/hide) are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-37-masonry-like-grid",
    "title": "Masonry-like Grid",
    "description": "Welcome to Masonry-like Grid! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "grid",
        "code": "!!document.querySelector('.grid')",
        "label": "Has element: .grid"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Masonry-like Grid are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-38-button-loading-state",
    "title": "Button Loading State",
    "description": "Welcome to Button Loading State! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Button Loading State are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-39-spacing-system-vars",
    "title": "Spacing System (vars)",
    "description": "Welcome to Spacing System (vars)! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Spacing System (vars) are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-4-flex-header",
    "title": "Flex Header",
    "description": "Welcome to Flex Header! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "header",
        "code": "!!document.querySelector('header nav')",
        "label": "Has element: header nav"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Flex Header are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-40-landing-page-polish",
    "title": "Landing Page Polish",
    "description": "Welcome to Landing Page Polish! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Landing Page Polish are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-5-hero-center",
    "title": "Hero Center",
    "description": "Welcome to Hero Center! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Hero Center are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-6-card-component",
    "title": "Card Component",
    "description": "Welcome to Card Component! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Card Component are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-7-button-variants",
    "title": "Button Variants",
    "description": "Welcome to Button Variants! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "btn",
        "code": "!!document.querySelector('.btn')",
        "label": "Has element: .btn"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Button Variants are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-8-form-layout-grid",
    "title": "Form Layout Grid",
    "description": "Welcome to Form Layout Grid! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "grid",
        "code": "!!document.querySelector('.grid')",
        "label": "Has element: .grid"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Form Layout Grid are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-9-accessible-focus",
    "title": "Accessible Focus",
    "description": "Welcome to Accessible Focus! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Accessible Focus are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-1-dom-render-list",
    "title": "DOM render list",
    "description": "This is a comprehensive challenge: DOM render list. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like DOM render list represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-10-form-validation",
    "title": "Form validation",
    "description": "This is a comprehensive challenge: Form validation. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Form validation represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-11-stable-ids",
    "title": "Stable IDs",
    "description": "This is a comprehensive challenge: Stable IDs. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Stable IDs represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-12-accessibility-labels-roles",
    "title": "Accessibility labels/roles",
    "description": "This is a comprehensive challenge: Accessibility labels/roles. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Accessibility labels/roles represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-13-keyboard-shortcuts",
    "title": "Keyboard shortcuts",
    "description": "This is a comprehensive challenge: Keyboard shortcuts. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Keyboard shortcuts represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-14-undo-last-delete",
    "title": "Undo last delete",
    "description": "This is a comprehensive challenge: Undo last delete. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Undo last delete represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-15-bulk-clear-confirm",
    "title": "Bulk clear (confirm)",
    "description": "This is a comprehensive challenge: Bulk clear (confirm). You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Bulk clear (confirm) represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-16-totals-panel",
    "title": "Totals panel",
    "description": "This is a comprehensive challenge: Totals panel. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Totals panel represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-17-live-total-update",
    "title": "Live total update",
    "description": "This is a comprehensive challenge: Live total update. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Live total update represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-18-currency-input-mask",
    "title": "Currency input mask",
    "description": "This is a comprehensive challenge: Currency input mask. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Currency input mask represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-19-category-field",
    "title": "Category field",
    "description": "This is a comprehensive challenge: Category field. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Category field represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-2-add-item-form",
    "title": "Add item form",
    "description": "This is a comprehensive challenge: Add item form. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Add item form represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-20-date-field-sort",
    "title": "Date field + sort",
    "description": "This is a comprehensive challenge: Date field + sort. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Date field + sort represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-21-responsive-two-column",
    "title": "Responsive two-column",
    "description": "This is a comprehensive challenge: Responsive two-column. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Responsive two-column represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-22-toast-notifications",
    "title": "Toast notifications",
    "description": "This is a comprehensive challenge: Toast notifications. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Toast notifications represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-23-modal-confirm",
    "title": "Modal confirm",
    "description": "This is a comprehensive challenge: Modal confirm. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Modal confirm represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-24-loading-empty-error-visuals",
    "title": "Loading/Empty/Error visuals",
    "description": "This is a comprehensive challenge: Loading/Empty/Error visuals. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Loading/Empty/Error visuals represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-25-import-export-json",
    "title": "Import/Export JSON",
    "description": "This is a comprehensive challenge: Import/Export JSON. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Import/Export JSON represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-26-input-masking-refine",
    "title": "Input masking refine",
    "description": "This is a comprehensive challenge: Input masking refine. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Input masking refine represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-27-data-testids",
    "title": "Data-testids",
    "description": "This is a comprehensive challenge: Data-testids. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Data-testids represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-28-tabs-views",
    "title": "Tabs views",
    "description": "This is a comprehensive challenge: Tabs views. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Tabs views represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-29-stats-view-by-category",
    "title": "Stats view (by category)",
    "description": "This is a comprehensive challenge: Stats view (by category). You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Stats view (by category) represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-3-delete-item",
    "title": "Delete item",
    "description": "This is a comprehensive challenge: Delete item. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Delete item represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-30-ls-namespacing-v1-v2",
    "title": "LS namespacing v1→v2",
    "description": "This is a comprehensive challenge: LS namespacing v1→v2. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like LS namespacing v1→v2 represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-31-debounced-saves",
    "title": "Debounced saves",
    "description": "This is a comprehensive challenge: Debounced saves. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Debounced saves represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-32-print-view",
    "title": "Print view",
    "description": "This is a comprehensive challenge: Print view. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Print view represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-33-keyboard-nav-in-list",
    "title": "Keyboard nav in list",
    "description": "This is a comprehensive challenge: Keyboard nav in list. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Keyboard nav in list represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-34-a11y-audit-fixes",
    "title": "A11y audit fixes",
    "description": "This is a comprehensive challenge: A11y audit fixes. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like A11y audit fixes represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-35-calculator-keypad-grid",
    "title": "Calculator keypad grid",
    "description": "This is a comprehensive challenge: Calculator keypad grid. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Calculator keypad grid represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-36-calculator-input-logic",
    "title": "Calculator input logic",
    "description": "This is a comprehensive challenge: Calculator input logic. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Calculator input logic represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-37-calculator-evaluate",
    "title": "Calculator evaluate",
    "description": "This is a comprehensive challenge: Calculator evaluate. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Calculator evaluate represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-38-calculator-clear-del",
    "title": "Calculator clear/del",
    "description": "This is a comprehensive challenge: Calculator clear/del. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Calculator clear/del represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-39-memory-buttons",
    "title": "Memory buttons",
    "description": "This is a comprehensive challenge: Memory buttons. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Memory buttons represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-4-edit-item-inline",
    "title": "Edit item inline",
    "description": "This is a comprehensive challenge: Edit item inline. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Edit item inline represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-40-final-expense-tracker",
    "title": "Final Expense Tracker",
    "description": "This is a comprehensive challenge: Final Expense Tracker. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Final Expense Tracker represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-5-filter-items",
    "title": "Filter items",
    "description": "This is a comprehensive challenge: Filter items. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Filter items represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-6-sort-controls",
    "title": "Sort controls",
    "description": "This is a comprehensive challenge: Sort controls. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Sort controls represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-7-empty-state",
    "title": "Empty state",
    "description": "This is a comprehensive challenge: Empty state. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Empty state represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-8-persist-to-localstorage",
    "title": "Persist to localStorage",
    "description": "This is a comprehensive challenge: Persist to localStorage. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Persist to localStorage represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-9-hydrate-from-localstorage",
    "title": "Hydrate from localStorage",
    "description": "This is a comprehensive challenge: Hydrate from localStorage. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Hydrate from localStorage represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "web-004",
    "title": "Card Shadow",
    "description": "Apply a non-none box-shadow to .card.",
    "difficulty": 2,
    "category": "html-css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Card Shadow</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div class='card' id='c'>Card</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Add box-shadow to .card */\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#c')); const p=[],f=[]; if((s.boxShadow||'')!=='none' && s.boxShadow!=='') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Apply a non-none box-shadow to .card."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Card Shadow</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div class='card' id='c'>Card</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": ".card{ box-shadow: 0 2px 8px rgba(0,0,0,.2); }\n",
      "script.js": "// No JS\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use box-shadow."
      },
      {
        "level": 2,
        "text": "Any non-none value passes."
      },
      {
        "level": 3,
        "text": "Target .card."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Card Shadow</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div class='card' id='c'>Card</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": ".card{ box-shadow: 0 1px 3px rgba(0,0,0,.12), 0 1px 2px rgba(0,0,0,.24); }\n",
          "script.js": "// No JS\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "CSS turns structure into experience. Mastering layout and visual states is essential for accessible, responsive interfaces that feel polished under real constraints."
  },
  {
    "id": "web-005",
    "title": "Filter List by Query",
    "description": "Implement filter(items, q) returning filtered array, and render matching li only.",
    "difficulty": 3,
    "category": "logic+dom",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Filter List by Query</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='q' value='ap'><ul id='list'><li>apple</li><li>pear</li><li>grape</li></ul>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "// Implement filter and then read #q and hide non-matching lis\nfunction filter(items, q){ /* TODO: return array containing items that include q (case-insensitive) */ }\nconst q=document.getElementById('q').value.toLowerCase(); document.querySelectorAll('#list li').forEach(li=>{ /* TODO: use filter or includes to hide/show */ });\nwindow.filter = filter;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; const lis=[...document.querySelectorAll('#list li')]; const hidden=lis.filter(li=>getComputedStyle(li).display==='none').map(li=>li.textContent); if(hidden.length===1 && hidden[0]==='pear') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Implement filter(items, q) returning filtered array, and render matching li only."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Filter List by Query</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='q' value='ap'><ul id='list'><li>apple</li><li>pear</li><li>grape</li></ul>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "function filter(items,q){ q=q.toLowerCase(); return items.filter(x=>x.toLowerCase().includes(q)); }\nconst q=document.getElementById('q').value.toLowerCase(); document.querySelectorAll('#list li').forEach(li=>{ li.style.display = li.textContent.toLowerCase().includes(q) ? '' : 'none'; });\nwindow.filter = filter;\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Write a pure filter(items,q)."
      },
      {
        "level": 2,
        "text": "Case-insensitive includes."
      },
      {
        "level": 3,
        "text": "Use function result to decide visibility."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Filter List by Query</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='q' value='ap'><ul id='list'><li>apple</li><li>pear</li><li>grape</li></ul>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* */\n",
          "script.js": "function filter(items,q){ q=q.toLowerCase(); const out=[]; for(const x of items){ if(x.toLowerCase().includes(q)) out.push(x); } return out; }\nconst q=document.getElementById('q').value.toLowerCase(); for(const li of document.querySelectorAll('#list li')) li.hidden = !li.textContent.toLowerCase().includes(q);\nwindow.filter = filter;\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Pure logic underpins UI behavior. Separating a pure function from DOM updates yields testable, reusable code—exactly how robust web apps are built."
  },
  {
    "id": "web-007",
    "title": "Sticky Header",
    "description": "Make header stick to top using position:sticky.",
    "difficulty": 2,
    "category": "html-css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Sticky Header</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <header id='hdr'>Header</header><main style='height:1000px'>Content</main>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Sticky header */\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#hdr')); const p=[],f=[]; if((s.position==='sticky'||s.position==='-webkit-sticky') && s.top==='0px') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Make header stick to top using position:sticky."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Sticky Header</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <header id='hdr'>Header</header><main style='height:1000px'>Content</main>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#hdr{ position: sticky; top:0; background:#fff; }\n",
      "script.js": "// No JS\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use position: sticky."
      },
      {
        "level": 2,
        "text": "Also set top: 0."
      },
      {
        "level": 3,
        "text": "Vendor prefix optional."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Sticky Header</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <header id='hdr'>Header</header><main style='height:1000px'>Content</main>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#hdr{ position: -webkit-sticky; position: sticky; top:0; }\n",
          "script.js": "// No JS\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "CSS turns structure into experience. Mastering layout and visual states is essential for accessible, responsive interfaces that feel polished under real constraints."
  },
  {
    "id": "web-008",
    "title": "Email Validation",
    "description": "Implement isEmail(s) and add 'error' class if invalid on blur.",
    "difficulty": 3,
    "category": "logic+dom",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Email Validation</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='email' value='notanemail'>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#email.error{ outline:2px solid red }\n",
      "script.js": "// Implement isEmail and attach blur handler\nfunction isEmail(s){ /* TODO: basic check: contains '@' and '.' after it */ }\nconst el=document.getElementById('email'); el.addEventListener('blur',()=>{ if(!isEmail(el.value)) el.classList.add('error'); });\nwindow.isEmail = isEmail;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; const el=document.querySelector('#email'); el.dispatchEvent(new Event('blur')); if(el.classList.contains('error')) p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Implement isEmail(s) and add 'error' class if invalid on blur."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Email Validation</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='email' value='notanemail'>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#email.error{ outline:2px solid red }\n",
      "script.js": "function isEmail(s){ const i=s.indexOf('@'); if(i<=0) return false; return s.slice(i+1).includes('.'); }\nconst el=document.getElementById('email'); el.addEventListener('blur',()=>{ if(!isEmail(el.value)) el.classList.add('error'); });\nwindow.isEmail = isEmail;\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Keep the function pure."
      },
      {
        "level": 2,
        "text": "Use minimal heuristics."
      },
      {
        "level": 3,
        "text": "Toggle class based on result."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Email Validation</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='email' value='notanemail'>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#email.error{ outline:2px solid red }\n",
          "script.js": "function isEmail(s){ return /.+@.+\\..+/.test(s); }\nconst el=document.getElementById('email'); el.onblur=()=>{ if(!isEmail(el.value)) el.className+=' error'; };\nwindow.isEmail = isEmail;\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Pure logic underpins UI behavior. Separating a pure function from DOM updates yields testable, reusable code—exactly how robust web apps are built."
  },
  {
    "id": "web-009",
    "title": "Sort Table Asc",
    "description": "Implement compare(a,b) numeric and sort table rows by first cell.",
    "difficulty": 3,
    "category": "logic+dom",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Sort Table Asc</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <table id='t'><tbody><tr><td>3</td></tr><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "// Implement compare and use it to sort\nfunction compare(a,b){ /* return negative/zero/positive like a-b */ }\nconst tb=document.querySelector('#t tbody'); const rows=[...tb.querySelectorAll('tr')]; rows.sort((r1,r2)=>compare(+r1.cells[0].textContent, +r2.cells[0].textContent)); rows.forEach(r=>tb.appendChild(r));\nwindow.compare = compare;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; const rows=[...document.querySelectorAll('#t tr')]; const order=rows.map(r=>r.cells[0].textContent).join(','); if(order==='1,2,3') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Implement compare(a,b) numeric and sort table rows by first cell."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Sort Table Asc</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <table id='t'><tbody><tr><td>3</td></tr><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "function compare(a,b){ return a-b; }\nconst tb=document.querySelector('#t tbody'); const rows=[...tb.querySelectorAll('tr')]; rows.sort((r1,r2)=>compare(+r1.cells[0].textContent, +r2.cells[0].textContent)); rows.forEach(r=>tb.appendChild(r));\nwindow.compare = compare;\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Write a simple subtract function."
      },
      {
        "level": 2,
        "text": "Use Array.sort with comparator."
      },
      {
        "level": 3,
        "text": "Append rows back to DOM."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Sort Table Asc</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <table id='t'><tbody><tr><td>3</td></tr><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* */\n",
          "script.js": "function compare(a,b){ if(a<b) return -1; if(a>b) return 1; return 0; }\nconst tb=document.getElementById('t').tBodies[0]; const rows=Array.from(tb.rows); rows.sort((a,b)=>+a.cells[0].innerText-+b.cells[0].innerText); for(const r of rows) tb.appendChild(r);\nwindow.compare = compare;\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Pure logic underpins UI behavior. Separating a pure function from DOM updates yields testable, reusable code—exactly how robust web apps are built."
  },
  {
    "id": "web-010",
    "title": "Responsive Image",
    "description": "Make #pic width:100% with max-width 400px.",
    "difficulty": 2,
    "category": "html-css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Responsive Image</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div style='width:500px'><img id='pic' src='x.jpg'></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* responsive */\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#pic')); const p=[],f=[]; if(s.maxWidth==='400px' and s.width in ['500px','auto','']) p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Make #pic width:100% with max-width 400px."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Responsive Image</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div style='width:500px'><img id='pic' src='x.jpg'></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#pic{ width:100%; max-width:400px; height:auto; }\n",
      "script.js": "// No JS\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use width:100%."
      },
      {
        "level": 2,
        "text": "Add max-width:400px."
      },
      {
        "level": 3,
        "text": "Keep height:auto."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Responsive Image</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div style='width:500px'><img id='pic' src='x.jpg'></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "img#pic{ max-width:400px; width:100%; }\n",
          "script.js": "// No JS\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "CSS turns structure into experience. Mastering layout and visual states is essential for accessible, responsive interfaces that feel polished under real constraints."
  },
  {
    "id": "web-011",
    "title": "Debounce Search",
    "description": "Implement debounce(fn,delay) and call once after rapid invocations.",
    "difficulty": 3,
    "category": "logic+dom",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Debounce Search</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='q' value='x'><p id='hits'>0</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "// Implement debounce and demonstrate\nfunction debounce(fn, delay){ /* TODO */ }\nconst out=document.getElementById('hits'); const inc=()=>{ out.textContent=String(+out.textContent+1); };\nconst d=debounce(inc, 0); d(); d(); d(); setTimeout(()=>d(),0);\nwindow.debounce = debounce;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; return new Promise(res=>setTimeout(()=>{ if(document.getElementById('hits').textContent==='2') res({passedIds:['a1'], failedIds:[], passed:true}); else res({passedIds:[], failedIds:['a1'], passed:false}); },5));",
        "label": "Implement debounce(fn,delay) and call once after rapid invocations."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Debounce Search</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='q' value='x'><p id='hits'>0</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "function debounce(fn,delay){ let t; return (...a)=>{ clearTimeout(t); t=setTimeout(()=>fn(...a), delay); }; }\nconst out=document.getElementById('hits'); const inc=()=>{ out.textContent=String(+out.textContent+1); }; const d=debounce(inc,0); d(); d(); d(); setTimeout(()=>d(),0);\nwindow.debounce = debounce;\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Clear timeout before setting a new one."
      },
      {
        "level": 2,
        "text": "Call fn when idle."
      },
      {
        "level": 3,
        "text": "Return the debounced wrapper."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Debounce Search</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='q' value='x'><p id='hits'>0</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* */\n",
          "script.js": "function debounce(fn,delay){ let id=null; return function(){ if(id) clearTimeout(id); id=setTimeout(fn, delay); }; }\nconst out=document.getElementById('hits'); const inc=()=>{ out.textContent=String(+out.textContent+1); }; const d=debounce(inc,0); d(); d(); d(); setTimeout(()=>d(),0);\nwindow.debounce = debounce;\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Pure logic underpins UI behavior. Separating a pure function from DOM updates yields testable, reusable code—exactly how robust web apps are built."
  },
  {
    "id": "web-012",
    "title": "Throttle Function",
    "description": "Implement throttle(fn,delay) so fn runs at most once per window.",
    "difficulty": 3,
    "category": "logic+dom",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Throttle Function</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p id='n'>0</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "// Implement throttle then simulate rapid calls\nfunction throttle(fn, delay){ /* TODO */ }\nconst out=document.getElementById('n'); const inc=()=>out.textContent=String(+out.textContent+1);\nconst t=throttle(inc, 0);\nt(); t(); t(); setTimeout(t,0);\nwindow.throttle = throttle;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; return new Promise(res=>setTimeout(()=>{ const v=document.getElementById('n').textContent; if(v==='2') res({passedIds:['a1'], failedIds:[], passed:true}); else res({passedIds:[], failedIds:['a1'], passed:false}); },5));",
        "label": "Implement throttle(fn,delay) so fn runs at most once per window."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Throttle Function</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p id='n'>0</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "function throttle(fn,delay){ let ready=true; return (...a)=>{ if(!ready) return; ready=false; fn(...a); setTimeout(()=>ready=true, delay); }; }\nconst out=document.getElementById('n'); const inc=()=>out.textContent=String(+out.textContent+1); const t=throttle(inc,0); t(); t(); t(); setTimeout(t,0);\nwindow.throttle = throttle;\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Track last run time or lock with a flag."
      },
      {
        "level": 2,
        "text": "Ignore calls inside window."
      },
      {
        "level": 3,
        "text": "Call again after window resets."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Throttle Function</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p id='n'>0</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* */\n",
          "script.js": "function throttle(fn,delay){ let last=0; return (...a)=>{ const now=Date.now(); if(now-last>=delay){ last=now; fn(...a); } }; }\nconst out=document.getElementById('n'); const inc=()=>out.textContent=String(+out.textContent+1); const t=throttle(inc,0); t(); t(); t(); setTimeout(t,0);\nwindow.throttle = throttle;\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Pure logic underpins UI behavior. Separating a pure function from DOM updates yields testable, reusable code—exactly how robust web apps are built."
  },
  {
    "id": "web-014",
    "title": "Two-Column Grid",
    "description": "Use CSS Grid with two equal columns.",
    "difficulty": 2,
    "category": "html-css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Two-Column Grid</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='grid'><div>a</div><div>b</div></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* grid */\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#grid')); const p=[],f=[]; if(s.display==='grid' && s.gridTemplateColumns.replace(/\\s+/g,'')==='1fr1fr') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Use CSS Grid with two equal columns."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Two-Column Grid</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='grid'><div>a</div><div>b</div></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#grid{ display:grid; grid-template-columns:1fr 1fr; }\n",
      "script.js": "// No JS\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "display: grid."
      },
      {
        "level": 2,
        "text": "grid-template-columns: 1fr 1fr."
      },
      {
        "level": 3,
        "text": "gap optional."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Two-Column Grid</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='grid'><div>a</div><div>b</div></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#grid{ display:grid; grid-template-columns:repeat(2,1fr); }\n",
          "script.js": "// No JS\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "CSS turns structure into experience. Mastering layout and visual states is essential for accessible, responsive interfaces that feel polished under real constraints."
  },
  {
    "id": "web-015",
    "title": "Theme Variable Toggle",
    "description": "Define --primary on :root and toggle value via JS.",
    "difficulty": 3,
    "category": "logic+dom",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Theme Variable Toggle</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1 id='t'>Title</h1>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": ":root{ --primary: #3498db; } #t{ color: var(--primary); }\n",
      "script.js": "// Implement togglePrimary to switch primary between #3498db and #e74c3c and apply it\nfunction togglePrimary(){ /* TODO */ }\n// call once\n\nwindow.togglePrimary = togglePrimary;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; window.togglePrimary(); const c=getComputedStyle(document.documentElement).getPropertyValue('--primary').trim(); if(c==='#e74c3c') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Define --primary on :root and toggle value via JS."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Theme Variable Toggle</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1 id='t'>Title</h1>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": ":root{ --primary: #3498db; } #t{ color: var(--primary); }\n",
      "script.js": "function togglePrimary(){ const root=document.documentElement; const cur=getComputedStyle(root).getPropertyValue('--primary').trim(); root.style.setProperty('--primary', cur==='#3498db'?'#e74c3c':'#3498db'); }\n\nwindow.togglePrimary = togglePrimary;\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use document.documentElement.style.setProperty."
      },
      {
        "level": 2,
        "text": "Read current value."
      },
      {
        "level": 3,
        "text": "Switch to the other hex."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Theme Variable Toggle</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1 id='t'>Title</h1>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": ":root{ --primary: #3498db; } #t{ color: var(--primary); }\n",
          "script.js": "function togglePrimary(){ const root=document.documentElement; const cur=root.style.getPropertyValue('--primary')||getComputedStyle(root).getPropertyValue('--primary'); root.style.setProperty('--primary', (cur.trim()==='#3498db')?'#e74c3c':'#3498db'); }\n\nwindow.togglePrimary = togglePrimary;\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Pure logic underpins UI behavior. Separating a pure function from DOM updates yields testable, reusable code—exactly how robust web apps are built."
  },
  {
    "id": "web-016",
    "title": "Uppercase Buttons",
    "description": "Make .btn text uppercase.",
    "difficulty": 2,
    "category": "html-css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Uppercase Buttons</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button class='btn' id='b'>press</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* uppercase */\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#b')); const p=[],f=[]; if((s.textTransform||'').toLowerCase()==='uppercase') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Make .btn text uppercase."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Uppercase Buttons</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button class='btn' id='b'>press</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": ".btn{ text-transform: uppercase; }\n",
      "script.js": "// No JS\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use text-transform."
      },
      {
        "level": 2,
        "text": "Target .btn."
      },
      {
        "level": 3,
        "text": "Inline or stylesheet."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Uppercase Buttons</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button class='btn' id='b'>press</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#b{ text-transform: uppercase; }\n",
          "script.js": "// No JS\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "CSS turns structure into experience. Mastering layout and visual states is essential for accessible, responsive interfaces that feel polished under real constraints."
  },
  {
    "id": "web-017",
    "title": "Counter with Step",
    "description": "Implement parseStep(btn) and increment #n by step from data-step.",
    "difficulty": 3,
    "category": "logic+dom",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Counter with Step</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='inc' data-step='3'>+</button> <span id='n'>0</span>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "// Implement parseStep and hook up click\nfunction parseStep(btn){ /* parseInt(btn.dataset.step||'1',10) */ }\ndocument.getElementById('inc').addEventListener('click',()=>{ const step=parseStep(document.getElementById('inc')); const n=document.getElementById('n'); n.textContent=String(+n.textContent + step); });\n// simulate\ndocument.getElementById('inc').click();\nwindow.parseStep = parseStep;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; if(document.getElementById('n').textContent==='3') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Implement parseStep(btn) and increment #n by step from data-step."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Counter with Step</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='inc' data-step='3'>+</button> <span id='n'>0</span>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "function parseStep(btn){ return parseInt(btn.dataset.step||'1',10); }\ndocument.getElementById('inc').onclick=()=>{ const step=parseStep(inc); const n=document.getElementById('n'); n.textContent=String(+n.textContent+step); }; document.getElementById('inc').click();\nwindow.parseStep = parseStep;\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Access dataset.step."
      },
      {
        "level": 2,
        "text": "Convert to number."
      },
      {
        "level": 3,
        "text": "Update textContent."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Counter with Step</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='inc' data-step='3'>+</button> <span id='n'>0</span>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* */\n",
          "script.js": "function parseStep(btn){ return Number(btn.getAttribute('data-step')||1); }\ndocument.getElementById('inc').dispatchEvent(new Event('click'));\nwindow.parseStep = parseStep;\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Pure logic underpins UI behavior. Separating a pure function from DOM updates yields testable, reusable code—exactly how robust web apps are built."
  },
  {
    "id": "web-020",
    "title": "Word Count",
    "description": "Implement countWords(s) and display count in #out on input.",
    "difficulty": 3,
    "category": "logic+dom",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Word Count</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <textarea id='txt'>one two  three</textarea><p id='out'>0</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "// pure function + handler\nfunction countWords(s){ /* split on whitespace, ignore empties */ }\nconst el=document.getElementById('txt'); const out=document.getElementById('out'); out.textContent=String(countWords(el.value));\nwindow.countWords = countWords;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; if(document.getElementById('out').textContent==='3') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Implement countWords(s) and display count in #out on input."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Word Count</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <textarea id='txt'>one two  three</textarea><p id='out'>0</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "function countWords(s){ s=s.trim(); if(!s) return 0; return s.split(/\\s+/).length; }\nconst el=document.getElementById('txt'); const out=document.getElementById('out'); out.textContent=String(countWords(el.value));\nwindow.countWords = countWords;\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use s.trim().split(/\\s+/)."
      },
      {
        "level": 2,
        "text": "Filter empties."
      },
      {
        "level": 3,
        "text": "Return length."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Word Count</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <textarea id='txt'>one two  three</textarea><p id='out'>0</p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* */\n",
          "script.js": "function countWords(s){ return (s.trim().match(/\\S+/g)||[]).length; }\nconst el=document.getElementById('txt'); const out=document.getElementById('out'); out.textContent=String(countWords(el.value));\nwindow.countWords = countWords;\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Pure logic underpins UI behavior. Separating a pure function from DOM updates yields testable, reusable code—exactly how robust web apps are built."
  },
  {
    "id": "web-022",
    "title": "Copy to Clipboard",
    "description": "Implement copy(text) using Clipboard API (fallback to window.__clipboard__).",
    "difficulty": 3,
    "category": "logic+dom",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Copy to Clipboard</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='src' value='secret'>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "async function copy(text){ /* if navigator.clipboard use writeText, else set window.__clipboard__=text and return true */ }\nconst v=document.getElementById('src').value; copy(v);\nwindow.copy = copy;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; setTimeout(()=>{},0); const ok=(navigator.clipboard&&navigator.clipboard.writeText) || window.__clipboard__==='secret'; if(ok) {return {passedIds:['a1'], failedIds:[], passed:true}} else {return {passedIds:[], failedIds:['a1'], passed:false}}",
        "label": "Implement copy(text) using Clipboard API (fallback to window.__clipboard__)."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Copy to Clipboard</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='src' value='secret'>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "async function copy(text){ if(navigator.clipboard&&navigator.clipboard.writeText){ await navigator.clipboard.writeText(text); return true; } window.__clipboard__=text; return true; }\nconst v=document.getElementById('src').value; copy(v);\nwindow.copy = copy;\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "navigator.clipboard.writeText returns a Promise."
      },
      {
        "level": 2,
        "text": "Fallback sets a global."
      },
      {
        "level": 3,
        "text": "Always resolve."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Copy to Clipboard</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='src' value='secret'>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* */\n",
          "script.js": "async function copy(text){ try{ await navigator.clipboard.writeText(text); }catch(e){ window.__clipboard__=text; } }\nconst v=document.getElementById('src').value; copy(v);\nwindow.copy = copy;\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Pure logic underpins UI behavior. Separating a pure function from DOM updates yields testable, reusable code—exactly how robust web apps are built."
  },
  {
    "id": "web-024",
    "title": "Tooltip via CSS",
    "description": "Show span.tooltip when parent is hovered.",
    "difficulty": 2,
    "category": "html-css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Tooltip via CSS</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div class='has-tip' id='wrap'>Hover me<span class='tooltip'>Hi</span></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": ".tooltip{ display:none } .has-tip:hover .tooltip{ display:inline }\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; const wrap=document.querySelector('#wrap'); wrap.dispatchEvent(new Event('mouseover')); const s=getComputedStyle(wrap.querySelector('.tooltip')); if(s.display!=='none') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Show span.tooltip when parent is hovered."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Tooltip via CSS</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div class='has-tip' id='wrap'>Hover me<span class='tooltip'>Hi</span></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": ".tooltip{ display:none } .has-tip:hover .tooltip{ display:inline }\n",
      "script.js": "// No JS\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Place tooltip as child."
      },
      {
        "level": 2,
        "text": "Use :hover descendant selector."
      },
      {
        "level": 3,
        "text": "Display inline/block."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Tooltip via CSS</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div class='has-tip' id='wrap'>Hover me<span class='tooltip'>Hi</span></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": ".has-tip .tooltip{ visibility:hidden } .has-tip:hover .tooltip{ visibility:visible }\n",
          "script.js": "// No JS\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "CSS turns structure into experience. Mastering layout and visual states is essential for accessible, responsive interfaces that feel polished under real constraints."
  },
  {
    "id": "web-025",
    "title": "Save Username",
    "description": "Implement save(name) to localStorage and render greeting.",
    "difficulty": 3,
    "category": "logic+dom",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Save Username</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='name' value='Alice'><p id='hi'></p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "function save(name){ /* localStorage.setItem('name', name) */ }\nconst v=document.getElementById('name').value; save(v); document.getElementById('hi').textContent='Hello, '+localStorage.getItem('name');\nwindow.save = save;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; if(document.getElementById('hi').textContent==='Hello, Alice') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Implement save(name) to localStorage and render greeting."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Save Username</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='name' value='Alice'><p id='hi'></p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "function save(name){ localStorage.setItem('name', name); }\nconst v=document.getElementById('name').value; save(v); document.getElementById('hi').textContent='Hello, '+localStorage.getItem('name');\nwindow.save = save;\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use localStorage.setItem/getItem."
      },
      {
        "level": 2,
        "text": "Key 'name'."
      },
      {
        "level": 3,
        "text": "Concatenate greeting."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Save Username</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='name' value='Alice'><p id='hi'></p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* */\n",
          "script.js": "function save(name){ localStorage.name=name; }\nconst v=document.getElementById('name').value; save(v); document.getElementById('hi').textContent='Hello, '+localStorage.name;\nwindow.save = save;\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Pure logic underpins UI behavior. Separating a pure function from DOM updates yields testable, reusable code—exactly how robust web apps are built."
  },
  {
    "id": "web-027",
    "title": "Image Gallery Next",
    "description": "Implement nextIndex(i,len) (wrap-around) and update #img data-index.",
    "difficulty": 3,
    "category": "logic+dom",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Image Gallery Next</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <img id='img' data-index='0'><button id='next'>Next</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "function nextIndex(i,len){ /* (i+1)%len */ }\nconst len=3; document.getElementById('next').addEventListener('click',()=>{ const el=document.getElementById('img'); el.dataset.index=String(nextIndex(+el.dataset.index, len)); }); document.getElementById('next').click();\nwindow.nextIndex = nextIndex;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; if(document.getElementById('img').dataset.index==='1') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Implement nextIndex(i,len) (wrap-around) and update #img data-index."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Image Gallery Next</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <img id='img' data-index='0'><button id='next'>Next</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "function nextIndex(i,len){ return (i+1)%len; }\nconst len=3; document.getElementById('next').onclick=()=>{ const el=document.getElementById('img'); el.dataset.index=String(nextIndex(+el.dataset.index,len)); }; document.getElementById('next').click();\nwindow.nextIndex = nextIndex;\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use modulo arithmetic."
      },
      {
        "level": 2,
        "text": "Read/write dataset."
      },
      {
        "level": 3,
        "text": "Convert to string."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Image Gallery Next</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <img id='img' data-index='0'><button id='next'>Next</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* */\n",
          "script.js": "function nextIndex(i,len){ return (i+1>=len)?0:i+1; }\nconst len=3; document.getElementById('next').dispatchEvent(new Event('click'));\nwindow.nextIndex = nextIndex;\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Pure logic underpins UI behavior. Separating a pure function from DOM updates yields testable, reusable code—exactly how robust web apps are built."
  },
  {
    "id": "web-028",
    "title": "Rounded Button",
    "description": "Give #rbtn border-radius at least 8px.",
    "difficulty": 2,
    "category": "html-css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Rounded Button</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='rbtn'>Go</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* rounded */\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#rbtn')); const p=[],f=[]; if(parseInt(s.borderRadius)>=8) p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Give #rbtn border-radius at least 8px."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Rounded Button</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='rbtn'>Go</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#rbtn{ border-radius: 8px; }\n",
      "script.js": "// No JS\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use border-radius."
      },
      {
        "level": 2,
        "text": "Any value >=8px passes."
      },
      {
        "level": 3,
        "text": "Target #rbtn."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Rounded Button</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button id='rbtn'>Go</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#rbtn{ border-radius: .5rem; }\n",
          "script.js": "// No JS\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "CSS turns structure into experience. Mastering layout and visual states is essential for accessible, responsive interfaces that feel polished under real constraints."
  },
  {
    "id": "web-030",
    "title": "Zebra Table Rows",
    "description": "Color even rows #f0f0f0.",
    "difficulty": 2,
    "category": "html-css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Zebra Table Rows</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <table id='tb'><tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* zebra */\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const row=document.querySelectorAll('#tb tr')[1]; const s=getComputedStyle(row); const p=[],f=[]; if(s.backgroundColor==='rgb(240, 240, 240)') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Color even rows #f0f0f0."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Zebra Table Rows</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <table id='tb'><tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#tb tr:nth-child(even){ background:#f0f0f0; }\n",
      "script.js": "// No JS\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use :nth-child(even)."
      },
      {
        "level": 2,
        "text": "Target rows."
      },
      {
        "level": 3,
        "text": "Set background color."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Zebra Table Rows</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <table id='tb'><tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "table#tb tr:nth-child(2n){ background:#f0f0f0; }\n",
          "script.js": "// No JS\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "CSS turns structure into experience. Mastering layout and visual states is essential for accessible, responsive interfaces that feel polished under real constraints."
  },
  {
    "id": "web-032",
    "title": "Rotate Element",
    "description": "Rotate #rot by any angle.",
    "difficulty": 2,
    "category": "html-css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Rotate Element</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='rot'>Rotate me</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#rot')); const p=[],f=[]; if((s.transform||'none')!=='none') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Rotate #rot by any angle."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Rotate Element</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='rot'>Rotate me</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#rot{ display:inline-block; transform: rotate(15deg); }\n",
      "script.js": "// No JS\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use transform: rotate(...)."
      },
      {
        "level": 2,
        "text": "Any non-none value passes."
      },
      {
        "level": 3,
        "text": "Display inline-block if needed."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Rotate Element</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='rot'>Rotate me</div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#rot{ transform: rotate(0.2rad); }\n",
          "script.js": "// No JS\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "CSS turns structure into experience. Mastering layout and visual states is essential for accessible, responsive interfaces that feel polished under real constraints."
  },
  {
    "id": "web-033",
    "title": "Serialize Form",
    "description": "Implement serialize(form) => {name:value}.",
    "difficulty": 3,
    "category": "logic+dom",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Serialize Form</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <form id='f'><input name='a' value='1'><input name='b' value='2'></form>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "function serialize(form){ /* TODO: loop elements with name */ }\nwindow.__form__=serialize(document.getElementById('f'));\nwindow.serialize = serialize;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; const o=window.__form__; if(o && o.a==='1' && o.b==='2') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Implement serialize(form) => {name:value}."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Serialize Form</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <form id='f'><input name='a' value='1'><input name='b' value='2'></form>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "function serialize(form){ const out={}; for(const el of form.elements){ if(el.name) out[el.name]=el.value; } return out; }\nwindow.__form__=serialize(document.getElementById('f'));\nwindow.serialize = serialize;\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Filter elements that have name."
      },
      {
        "level": 2,
        "text": "Assign value by name."
      },
      {
        "level": 3,
        "text": "Return new object."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Serialize Form</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <form id='f'><input name='a' value='1'><input name='b' value='2'></form>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* */\n",
          "script.js": "function serialize(form){ return Array.from(form.elements).filter(e=>e.name).reduce((a,e)=>(a[e.name]=e.value,a),{}); }\nwindow.__form__=serialize(document.getElementById('f'));\nwindow.serialize = serialize;\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Pure logic underpins UI behavior. Separating a pure function from DOM updates yields testable, reusable code—exactly how robust web apps are built."
  },
  {
    "id": "web-034",
    "title": "Letter Spacing",
    "description": "Set #h2 letter-spacing to 2px.",
    "difficulty": 2,
    "category": "html-css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Letter Spacing</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h2 id='h2'>Spacing</h2>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#h2')); const p=[],f=[]; if(s.letterSpacing==='2px') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Set #h2 letter-spacing to 2px."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Letter Spacing</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h2 id='h2'>Spacing</h2>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#h2{ letter-spacing: 2px; }\n",
      "script.js": "// No JS\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use letter-spacing."
      },
      {
        "level": 2,
        "text": "Target #h2."
      },
      {
        "level": 3,
        "text": "Unit px or equivalent."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Letter Spacing</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h2 id='h2'>Spacing</h2>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#h2{ letter-spacing: 0.125em; }\n",
          "script.js": "// No JS\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "CSS turns structure into experience. Mastering layout and visual states is essential for accessible, responsive interfaces that feel polished under real constraints."
  },
  {
    "id": "web-035",
    "title": "Text Shadow",
    "description": "Apply a non-none text-shadow to #ts.",
    "difficulty": 2,
    "category": "html-css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Text Shadow</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h3 id='ts'>Shadow</h3>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#ts')); const p=[],f=[]; if((s.textShadow||'')!=='none' and s.textShadow!='') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Apply a non-none text-shadow to #ts."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Text Shadow</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h3 id='ts'>Shadow</h3>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#ts{ text-shadow: 1px 1px 2px rgba(0,0,0,.3); }\n",
      "script.js": "// No JS\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use text-shadow."
      },
      {
        "level": 2,
        "text": "Any value counts."
      },
      {
        "level": 3,
        "text": "Subtlety preferred."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Text Shadow</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h3 id='ts'>Shadow</h3>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "#ts{ text-shadow: 0 0 6px rgba(0,0,0,.5); }\n",
          "script.js": "// No JS\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "CSS turns structure into experience. Mastering layout and visual states is essential for accessible, responsive interfaces that feel polished under real constraints."
  },
  {
    "id": "web-037",
    "title": "Use CSS Variable",
    "description": "Declare --gap:16px and apply to grid gap.",
    "difficulty": 2,
    "category": "html-css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Use CSS Variable</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='g'><div>a</div><div>b</div></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "#g{ display:grid; grid-template-columns:1fr 1fr; }\n",
      "script.js": "// No JS required\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const s=getComputedStyle(document.querySelector('#g')); const p=[],f=[]; if(getComputedStyle(document.documentElement).getPropertyValue('--gap').trim()==='16px' and s.gap=='16px') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Declare --gap:16px and apply to grid gap."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Use CSS Variable</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='g'><div>a</div><div>b</div></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": ":root{ --gap:16px } #g{ gap: var(--gap); }\n",
      "script.js": "// No JS\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Declare in :root."
      },
      {
        "level": 2,
        "text": "Use var(--gap)."
      },
      {
        "level": 3,
        "text": "Apply to gap property."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Use CSS Variable</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id='g'><div>a</div><div>b</div></div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": ":root{ --gap:16px } #g{ column-gap: var(--gap); row-gap: var(--gap); }\n",
          "script.js": "// No JS\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "CSS turns structure into experience. Mastering layout and visual states is essential for accessible, responsive interfaces that feel polished under real constraints."
  },
  {
    "id": "web-038",
    "title": "Texts to Array",
    "description": "Collect all li text into array via texts(ul) and store on window.__arr.",
    "difficulty": 3,
    "category": "logic+dom",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Texts to Array</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ul id='list'><li>a</li><li>b</li><li>c</li></ul>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "function texts(ul){ /* return array of textContent for li children */ }\nwindow.__arr = texts(document.getElementById('list'));\nwindow.texts = texts;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; const a=window.__arr; if(Array.isArray(a) and ','.join(a)=='a,b,c') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Collect all li text into array via texts(ul) and store on window.__arr."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Texts to Array</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ul id='list'><li>a</li><li>b</li><li>c</li></ul>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "function texts(ul){ return Array.from(ul.querySelectorAll('li')).map(li=>li.textContent); }\nwindow.__arr=texts(document.getElementById('list'));\nwindow.texts = texts;\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use querySelectorAll('li')."
      },
      {
        "level": 2,
        "text": "Map li.textContent."
      },
      {
        "level": 3,
        "text": "Return array."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Texts to Array</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ul id='list'><li>a</li><li>b</li><li>c</li></ul>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* */\n",
          "script.js": "function texts(ul){ const out=[]; for(const li of ul.getElementsByTagName('li')) out.push(li.textContent); return out; }\nwindow.__arr=texts(document.getElementById('list'));\nwindow.texts = texts;\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Pure logic underpins UI behavior. Separating a pure function from DOM updates yields testable, reusable code—exactly how robust web apps are built."
  },
  {
    "id": "web-039",
    "title": "Enable on Length",
    "description": "Implement isLongEnough(s,min) and enable #go if valid.",
    "difficulty": 3,
    "category": "logic+dom",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Enable on Length</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='txt' value='hi'><button id='go' disabled>Go</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "function isLongEnough(s,min){ /* return s.length>=min */ }\nconst input=document.getElementById('txt'); const go=document.getElementById('go'); if(isLongEnough(input.value,2)) go.disabled=false;\nwindow.isLongEnough = isLongEnough;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; if(!document.getElementById('go').disabled) p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Implement isLongEnough(s,min) and enable #go if valid."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Enable on Length</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='txt' value='hi'><button id='go' disabled>Go</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "function isLongEnough(s,min){ return s.length>=min; }\nconst input=document.getElementById('txt'); const go=document.getElementById('go'); if(isLongEnough(input.value,2)) go.disabled=false;\nwindow.isLongEnough = isLongEnough;\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Keep it pure."
      },
      {
        "level": 2,
        "text": "Compare length with min."
      },
      {
        "level": 3,
        "text": "Set disabled=false when valid."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Enable on Length</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input id='txt' value='hi'><button id='go' disabled>Go</button>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* */\n",
          "script.js": "function isLongEnough(s,min){ return (s||'').length>=min; }\nconst input=document.getElementById('txt'); const go=document.getElementById('go'); go.disabled=!isLongEnough(input.value,2);\nwindow.isLongEnough = isLongEnough;\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Pure logic underpins UI behavior. Separating a pure function from DOM updates yields testable, reusable code—exactly how robust web apps are built."
  },
  {
    "id": "web-040",
    "title": "Toggle Case",
    "description": "Implement toggleCase(s) and set #out to transformed string.",
    "difficulty": 3,
    "category": "logic+dom",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Toggle Case</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p id='out'></p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "function toggleCase(s){ /* switch a<->A */ }\ndocument.getElementById('out').textContent=toggleCase('AbC');\nwindow.toggleCase = toggleCase;\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const p=[],f=[]; if(document.getElementById('out').textContent==='aBc') p.push('a1'); else f.push('a1'); return {passedIds:p, failedIds:f, passed:!f.length};",
        "label": "Implement toggleCase(s) and set #out to transformed string."
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Toggle Case</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p id='out'></p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* */\n",
      "script.js": "function toggleCase(s){ let out=''; for(const ch of s){ const low=ch.toLowerCase(); const up=ch.toUpperCase(); out+= ch===low ? up : low; } return out; }\ndocument.getElementById('out').textContent=toggleCase('AbC');\nwindow.toggleCase = toggleCase;\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Iterate characters."
      },
      {
        "level": 2,
        "text": "If lower -> upper, else upper -> lower."
      },
      {
        "level": 3,
        "text": "Join back."
      }
    ],
    "alternativeSolutions": [
      {
        "label": "sol-2",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Toggle Case</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p id='out'></p>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
          "style.css": "/* */\n",
          "script.js": "function toggleCase(s){ return s.replace(/[a-z]/gi,c=> c===c.toLowerCase()? c.toUpperCase(): c.toLowerCase()); }\ndocument.getElementById('out').textContent=toggleCase('AbC');\nwindow.toggleCase = toggleCase;\n"
        },
        "explanation": "An alternative solution approach."
      }
    ],
    "realWorldContext": "Pure logic underpins UI behavior. Separating a pure function from DOM updates yields testable, reusable code—exactly how robust web apps are built."
  }
]